{
  "files": [
    {
      "path": "src/__init__.py",
      "language": "python",
      "description": "Initialization script for the src package that enables package-level imports and configurations.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "src/data_loader.py",
      "language": "Python",
      "description": "This file contains the QuranDataLoader class responsible for loading Quran verse data from a text file. It handles parsing lines in the format 'surah|ayah|verse_text' and converts them into a structured list of dictionaries. The class includes error handling for file not found scenarios and proper logging.",
      "classes": [
        {
          "name": "QuranDataLoader",
          "description": "A class that loads and parses Quran data from a text file. Each line in the file is expected to be in the format 'surah|ayah|verse_text'. The class provides functionality to read this data and convert it into a structured format for further processing.",
          "parents": [],
          "methods": [
            {
              "name": "__init__",
              "description": "Initializes the QuranDataLoader with an optional file path and sets up logging.",
              "parameters": [
                {
                  "name": "self",
                  "type": "QuranDataLoader",
                  "description": "Instance of the class"
                },
                {
                  "name": "file_path",
                  "type": "str",
                  "description": "Path to the data file. If None, returns empty data."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "load_data",
              "description": "Loads data from the specified file, parsing each line into a dictionary with 'surah', 'ayah', and 'verse_text' keys. Raises FileNotFoundError if the file path is not provided or the file does not exist.",
              "parameters": [
                {
                  "name": "self",
                  "type": "QuranDataLoader",
                  "description": "Instance of the class"
                }
              ],
              "return_type": "list"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "os",
        "logging"
      ]
    },
    {
      "path": "src/text_preprocessor.py",
      "language": "python",
      "description": "Module defining the TextPreprocessor class which processes Arabic text. It performs normalization, tokenization, lemmatization, and root extraction, while logging each step for debugging and verification.",
      "classes": [
        {
          "name": "TextPreprocessor",
          "description": "A class for preprocessing Arabic text by normalizing, tokenizing, lemmatizing, and extracting root words. It logs various processing steps for debugging.",
          "parents": [],
          "methods": [
            {
              "name": "__init__",
              "description": "Initialize the TextPreprocessor and configure the logger.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "preprocess_text",
              "description": "Preprocess the Arabic text by performing normalization, tokenization, lemmatization, and root extraction. Returns the processed tokens joined by a space.",
              "parameters": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "The input Arabic text."
                }
              ],
              "return_type": "string"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/arabic_normalization.py",
        "src/tokenizer.py",
        "src/lemmatizer.py",
        "src/root_extractor.py"
      ]
    },
    {
      "path": "src/logger_config.py",
      "language": "python",
      "description": "Configures and returns a logger for the application, logging messages to both console and a log file named 'quran_analysis.log'.",
      "classes": [],
      "functions": [
        {
          "name": "configure_logger",
          "description": "Configures and returns a logger that logs messages to both console and a log file.\n\nThe log file is named 'quran_analysis.log' and is located in the project root.\n\n:return: Configured logger instance.",
          "parameters": [],
          "return_type": "logger"
        }
      ],
      "dependencies": [
        "logging",
        "os"
      ]
    },
    {
      "path": "src/main.py",
      "language": "python",
      "description": "Main entry point of the application. Orchestrates data loading, text preprocessing, and various frequency and co-occurrence analyses on Quran text. Integrates multiple modules including data loader, logger configuration, frequency analyzers, and co-occurrence analyzers to execute the complete analysis workflow.",
      "classes": [],
      "functions": [
        {
          "name": "main",
          "description": "Main function to orchestrate data loading, text preprocessing, and various analysis tasks on Quran data. It sets up logging, loads data, performs multiple analyses, logs results, and gracefully handles errors.",
          "parameters": [],
          "return_type": "None"
        }
      ],
      "dependencies": [
        "src/logger_config.py",
        "src/data_loader.py",
        "src/text_preprocessor.py",
        "src/frequency_analyzer.py",
        "src/cooccurrence_analyzer.py"
      ]
    },
    {
      "path": "setup.py",
      "language": "python",
      "description": "Setup script for the QuranAnalysis package. Configures package metadata, dependencies, and entry points for console scripts using setuptools.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "requirements.txt",
      "language": "None",
      "description": "Requirements file listing the project's dependencies, including the camel-tools package required for Arabic text processing.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "data/quran-uthmani-min.txt",
      "language": "None",
      "description": "Data file containing the Quran text in a simple format with surah|ayah|verse text.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "tests/__init__.py",
      "language": "python",
      "description": "Initialization script for the tests package that enables discovery and execution of test cases.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "tests/test_data_loader.py",
      "language": "Python",
      "description": "This file contains unit tests for the QuranDataLoader class. It tests the functionality of loading data from a file, including error handling for file not found scenarios. The tests use a temporary file with test data to verify that the loader correctly parses the file and returns the expected data structure.",
      "classes": [
        {
          "name": "TestQuranDataLoader",
          "description": "A test class for the QuranDataLoader that verifies its functionality for loading and parsing Quran data from a text file. It includes tests for both successful data loading and error handling when a file is not found.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "setUp",
              "description": "Sets up the test environment by creating a temporary file with test data.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestQuranDataLoader",
                  "description": "Instance of the test class"
                }
              ],
              "return_type": "None"
            },
            {
              "name": "tearDown",
              "description": "Cleans up the test environment by removing the temporary file.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestQuranDataLoader",
                  "description": "Instance of the test class"
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_load_data_file_not_found",
              "description": "Tests that load_data raises FileNotFoundError when the file doesn't exist.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestQuranDataLoader",
                  "description": "Instance of the test class"
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_load_data_success",
              "description": "Tests that load_data correctly parses the file and returns the expected data structure.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestQuranDataLoader",
                  "description": "Instance of the test class"
                }
              ],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "unittest",
        "os",
        "tempfile",
        "unittest.mock",
        "src.data_loader"
      ]
    },
    {
      "path": "tests/test_text_preprocessor.py",
      "language": "python",
      "description": "This file contains unit tests for the text preprocessing components including the TextPreprocessor class, the normalize_text function, and the tokenize_text function. It verifies that diacritics are removed, texts are properly normalized, and tokenization is executed correctly.",
      "classes": [
        {
          "name": "TestTextPreprocessor",
          "description": "Unit tests for text preprocessing functionalities. Tests cover normalization of Arabic text and proper splitting of text tokens.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "test_preprocess_text_removes_diacritics_and_normalizes",
              "description": "Tests that the TextPreprocessor correctly removes diacritics and normalizes Arabic letters in the input text.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_preprocess_text_no_modification",
              "description": "Tests that the TextPreprocessor leaves already normalized text unchanged.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_arabic_normalization_removes_invisible_and_normalizes",
              "description": "Tests that the normalize_text function removes invisible characters and diacritics while normalizing Arabic letters according to the mapping rules.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_tokenizer_splits_on_punctuation_and_whitespace",
              "description": "Tests that the tokenize_text function correctly splits input text into tokens based on punctuation and whitespace.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/text_preprocessor.py",
        "src/arabic_normalization.py",
        "src/tokenizer.py"
      ]
    },
    {
      "path": "tests/test_logger_config.py",
      "language": "python",
      "description": "Unit tests for the logger configuration ensuring the logger is set up with a FileHandler for the log file.",
      "classes": [
        {
          "name": "TestLoggerConfig",
          "description": "Unit tests for testing logger configuration via the configure_logger function.",
          "parents": [],
          "methods": [
            {
              "name": "test_configure_logger_creates_log_file",
              "description": "Test that the logger is configured with a FileHandler pointing to 'quran_analysis.log'.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/logger_config.py"
      ]
    },
    {
      "path": "tests/test_integration.py",
      "language": "python",
      "description": "Integration tests for the core user flow of the application using the unittest framework. Sets up environment variables, sample data, and validates that the logging output contains expected messages from various analysis functions.",
      "classes": [
        {
          "name": "TestIntegration",
          "description": "Integration tests for the core user flow using unittest. Contains tests that execute the application workflow and assert the correctness of logging outputs.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "test_integration_flow",
              "description": "Runs the main application flow, sets up sample data, verifies that expected log messages are present in the log file, and cleans up the created test files.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/main.py"
      ]
    },
    {
      "path": "src/arabic_normalization.py",
      "language": "python",
      "description": "This file implements a function 'normalize_text' that performs comprehensive Arabic text normalization. It removes invisible Unicode characters, strips Arabic diacritics, and maps various Arabic letter forms to their standard forms. Special handling is provided to convert taa marbuta to ha when it follows a ya.",
      "classes": [],
      "functions": [
        {
          "name": "normalize_text",
          "description": "Normalizes Arabic text by removing invisible Unicode characters and diacritics, applying a mapping to standardize Arabic letters, and converting taa marbuta to ha when preceded by ya. The function uses regular expressions for pattern matching and substitution.",
          "parameters": [
            {
              "name": "text",
              "type": "string",
              "description": "The input Arabic text that needs normalization."
            }
          ],
          "return_type": "string"
        }
      ],
      "dependencies": []
    },
    {
      "path": "src/tokenizer.py",
      "language": "python",
      "description": "Module to tokenize Arabic text into individual word tokens using whitespace and punctuation as delimiters.",
      "classes": [],
      "functions": [
        {
          "name": "tokenize_text",
          "description": "Tokenize the normalized Arabic text into a list of word tokens based on whitespace and punctuation.",
          "parameters": [
            {
              "name": "text",
              "type": "string",
              "description": "The input normalized Arabic text to be tokenized."
            }
          ],
          "return_type": "list"
        }
      ],
      "dependencies": []
    },
    {
      "path": "src/lemmatizer.py",
      "language": "python",
      "description": "Module for Arabic lemmatization. Provides functionality to lemmatize Arabic tokens using CAMeL Tools.",
      "classes": [],
      "functions": [
        {
          "name": "lemmatize_token",
          "description": "Lemmatize the given Arabic token using CAMeL Tools. Returns the lemmatized form if successful; otherwise returns the original token.",
          "parameters": [
            {
              "name": "token",
              "type": "string",
              "description": "The Arabic word token."
            }
          ],
          "return_type": "string"
        }
      ],
      "dependencies": []
    },
    {
      "path": "src/root_extractor.py",
      "language": "python",
      "description": "Module for Arabic root word extraction. Provides functionality to extract the root of an Arabic token using CAMeL Tools morphological analysis.",
      "classes": [],
      "functions": [
        {
          "name": "extract_root",
          "description": "Extract the root of the given Arabic token using CAMeL Tools morphological analysis. Returns the root if found; otherwise returns the original token.",
          "parameters": [
            {
              "name": "token",
              "type": "string",
              "description": "The Arabic word token."
            }
          ],
          "return_type": "string"
        }
      ],
      "dependencies": []
    },
    {
      "path": "tests/test_lemmatizer.py",
      "language": "Python",
      "description": "Unit tests for the Arabic lemmatizer function. Uses unittest and mock patching to validate the behavior of lemmatize_token by simulating the lemmatizer instance.",
      "classes": [
        {
          "name": "TestLemmatizer",
          "description": "Contains unit tests for the Arabic lemmatizer. Tests the lemmatize_token function to ensure it appends '_lem' to a given token using a mocked lemmatizer instance.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "test_lemmatize_token",
              "description": "Tests that lemmatize_token returns the token appended with '_lem' using a mocked lemmatizer instance.",
              "parameters": [
                {
                  "name": "mock_lemmatizer_instance",
                  "type": "Mock",
                  "description": "A mocked instance of the internal lemmatizer to simulate the lemmatization behavior."
                }
              ],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/lemmatizer"
      ]
    },
    {
      "path": "tests/test_root_extractor.py",
      "language": "Python",
      "description": "Unit tests for the Arabic root extraction functionality. Validates the behavior of extract_root function with both valid analysis and fallback when analysis returns an empty result.",
      "classes": [
        {
          "name": "TestRootExtractor",
          "description": "Contains unit tests for Arabic root extraction, testing both cases when a valid root is returned and when no analysis result is provided.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "test_extract_root",
              "description": "Tests that extract_root returns the correct root when the analyzer returns a valid result.",
              "parameters": [
                {
                  "name": "mock_analyzer_instance",
                  "type": "Mock",
                  "description": "A mocked analyzer instance to simulate analysis returning a valid root."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_extract_root_no_analysis",
              "description": "Tests that extract_root returns the original token when the analyzer returns an empty result.",
              "parameters": [
                {
                  "name": "mock_analyzer_instance",
                  "type": "Mock",
                  "description": "A mocked analyzer instance to simulate analysis returning an empty list."
                }
              ],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/root_extractor"
      ]
    },
    {
      "path": "src/frequency_analyzer.py",
      "language": "python",
      "description": "This file contains various functions to analyze word frequencies, word length distributions, and root/lemma frequency analyses of Quran text. It provides methods to count words, analyze distributions at the Surah and Ayah levels, and perform character frequency analysis with detailed logging.",
      "classes": [],
      "functions": [
        {
          "name": "count_word_frequencies",
          "description": "Count the frequency of each word in the tokenized text. It takes a list of lists of tokens and returns a dictionary mapping each word to its frequency count.",
          "parameters": [
            {
              "name": "tokenized_text",
              "type": "list",
              "description": "List of lists containing tokens extracted from verses."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_word_length_distribution",
          "description": "Analyze the distribution of word lengths in tokenized text. It logs total words analyzed, average word length, and the most frequent word lengths, returning a dictionary mapping word lengths to their frequency.",
          "parameters": [
            {
              "name": "tokenized_text",
              "type": "list",
              "description": "List of lists containing tokenized words from verses."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_surah_word_frequency",
          "description": "Analyze word frequencies at the Surah level. Logs the top 10 most frequent words per Surah and returns a dictionary mapping Surah names to their frequency counter.",
          "parameters": [
            {
              "name": "data",
              "type": "list",
              "description": "List of dictionaries containing Quran data."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_ayah_word_frequency",
          "description": "Analyze word frequencies at the Ayah level. Logs the top 5 most frequent words for each Ayah and returns a dictionary mapping (Surah, Ayah) to their word frequency counter.",
          "parameters": [
            {
              "name": "data",
              "type": "list",
              "description": "List of dictionaries containing Quran data."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_root_word_frequency",
          "description": "Analyze the frequency of root words across Quran data. Logs analysis details and returns a counter object mapping root words to their frequency count.",
          "parameters": [
            {
              "name": "data",
              "type": "list",
              "description": "List of dictionaries containing Quran data with a 'roots' key."
            }
          ],
          "return_type": "Counter"
        },
        {
          "name": "analyze_lemma_word_frequency",
          "description": "Analyze the frequency of lemma words across Quran data. Logs analysis details and returns a counter object mapping lemma words to their frequency count.",
          "parameters": [
            {
              "name": "data",
              "type": "list",
              "description": "List of dictionaries containing Quran data with a 'lemmas' key."
            }
          ],
          "return_type": "Counter"
        },
        {
          "name": "analyze_surah_root_word_frequency",
          "description": "Analyze the frequency of root words at the Surah level. Preprocesses verse texts to extract root words and returns a dictionary mapping Surah identifiers to a counter of root word frequencies.",
          "parameters": [
            {
              "name": "data",
              "type": "list",
              "description": "List of dictionaries containing Quran data."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_ayah_root_word_frequency",
          "description": "Analyze the frequency of root words at the Ayah level. Tokenizes ayah text, extracts root words, and returns a dictionary mapping ayah identifiers to dictionaries of root word frequencies.",
          "parameters": [
            {
              "name": "data",
              "type": "list",
              "description": "List of dictionaries containing Quran data."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_character_frequency",
          "description": "Analyze the frequency of each character in the tokenized Quran text. Logs the top 20 most frequent characters and returns a dictionary mapping characters to their counts.",
          "parameters": [
            {
              "name": "tokenized_text",
              "type": "list",
              "description": "List of ayahs, where each ayah is a list of words."
            }
          ],
          "return_type": "dict"
        }
      ],
      "dependencies": [
        "src/text_preprocessor.py",
        "src/tokenizer.py",
        "src/root_extractor.py"
      ]
    },
    {
      "path": "src/cooccurrence_analyzer.py",
      "language": "python",
      "description": "This module provides functionality to analyze word co-occurrence within each ayah of the Quran data. It tokenizes the text and counts unique co-occurring word pairs, logging the top N pairs and the total number of unique pairs.",
      "classes": [],
      "functions": [
        {
          "name": "analyze_word_cooccurrence",
          "description": "Analyzes word co-occurrence within each ayah of the Quran data. It tokenizes the verse text and counts unique word pairs, ensuring pairs are stored in alphabetical order for consistency.",
          "parameters": [
            {
              "name": "quran_data",
              "type": "list",
              "description": "List of dictionaries, each containing 'surah', 'ayah', and either 'processed_text' or 'verse_text'."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_root_word_cooccurrence",
          "description": "Analyzes Root word co-occurrence within each ayah of the Quran data. It tokenizes the verse text and counts unique root word pairs, ensuring pairs are stored in alphabetical order for consistency.",
          "parameters": [
            {
              "name": "quran_data",
              "type": "list",
              "description": "List of dictionaries, each containing 'surah', 'ayah', and either 'processed_text' or 'verse_text'."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_lemma_word_cooccurrence",
          "description": "Analyzes Lemma word co-occurrence within each ayah of the Quran data. It tokenizes the verse text and counts unique lemma word pairs, ensuring pairs are stored in alphabetical order for consistency.",
          "parameters": [
            {
              "name": "quran_data",
              "type": "list",
              "description": "List of dictionaries, each containing 'surah', 'ayah', and either 'processed_text' or 'verse_text'."
            }
          ],
          "return_type": "dict"
        }
      ],
      "dependencies": [
        "src/tokenizer.py"
      ]
    }
  ]
}