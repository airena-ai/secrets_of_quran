{
  "files": [
    {
      "path": "setup.py",
      "language": "Python",
      "description": "Setup file for Quran Secrets package. Contains configuration details for packaging and installation of the Quran Secrets application.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "requirements.txt",
      "language": "None",
      "description": "List of required packages for the project. Specifies dependencies like camel_tools and scipy.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "src/__init__.py",
      "language": "Python",
      "description": "Initialization file for quran_secrets package, used to mark the src directory as a Python package and perform any package-level initializations if required.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "src/main.py",
      "language": "Python",
      "description": "Main driver for the Quran Secrets application. It reads the Quran text, preprocesses it, and invokes various analysis functions.",
      "classes": [],
      "functions": [
        {
          "name": "main",
          "description": "Main entry point for the Quran Secrets analysis.",
          "parameters": [],
          "return_type": "None"
        }
      ],
      "dependencies": [
        "src/file_reader",
        "src/text_preprocessor",
        "src/analyzer",
        "src/logger",
        "sys"
      ]
    },
    {
      "path": "src/file_reader.py",
      "language": "Python",
      "description": "Module for reading the Quran text from a file. Contains a function to open a file and return its contents, or raise an IOError if the file cannot be read.",
      "classes": [],
      "functions": [
        {
          "name": "read_quran_text",
          "description": "Read and return the text from the specified Quran file. Raises an IOError if the file cannot be read.",
          "parameters": [
            {
              "name": "file_path",
              "type": "str",
              "description": "The path to the Quran text file."
            }
          ],
          "return_type": "str"
        }
      ],
      "dependencies": []
    },
    {
      "path": "src/text_preprocessor.py",
      "language": "Python",
      "description": "This module provides functionality for preprocessing and normalizing Arabic text. It includes functions to remove diacritics and normalize specific Arabic letters according to certain rules. The module is designed to standardize Arabic text for further processing in NLP or text analysis applications.",
      "classes": [],
      "functions": [
        {
          "name": "remove_diacritics",
          "description": "Removes all Arabic diacritical marks (tashkeel) from the input text. These marks include fatha, kasra, damma, sukun, shadda, and other vowel marks that appear above or below letters in Arabic script. The function uses regular expressions to identify and remove these marks.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The original Arabic text containing diacritics that need to be removed."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "normalize_arabic_letters",
          "description": "Normalizes specific Arabic letters in the given text according to contextual rules. It specifically handles two cases: 1) Converting the Arabic letter 'ى' (alef maqsura, U+0649) to 'ي' (yeh, U+064A) only when it appears as a standalone word, and 2) Converting the Arabic letter 'ة' (teh marbuta, U+0629) to 'ه' (heh, U+0647) when it appears at the end of words. This normalization helps standardize text variations that are semantically equivalent in Arabic.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The Arabic text to be normalized."
            }
          ],
          "return_type": "str"
        }
      ],
      "dependencies": [
        "re"
      ]
    },
    {
      "path": "src/analyzer.py",
      "language": "Python",
      "description": "Module for analyzing the Quran text for hidden patterns and anomalies. It contains various functions for text analysis including word frequency, root analysis, bigrams, verse repetitions, palindromes, Abjad numeral analysis, semantic symmetry analyses, and Muqatta'at related analyses.",
      "classes": [],
      "functions": [
        {
          "name": "analyze_text",
          "description": "Analyzes the given text for hidden numerical patterns and anomalies.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed text of the Quran."
            }
          ],
          "return_type": "list"
        },
        {
          "name": "analyze_word_frequency",
          "description": "Performs word frequency analysis on the given preprocessed Quran text and flags unusual frequencies.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "tuple"
        },
        {
          "name": "analyze_root_words",
          "description": "Performs Arabic root word analysis on the preprocessed Quran text, returning summary and frequency details.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "tuple"
        },
        {
          "name": "analyze_bigrams",
          "description": "Performs bigram frequency analysis on tokenized text.",
          "parameters": [
            {
              "name": "tokenized_text",
              "type": "list",
              "description": "A list of preprocessed tokens from the Quran text."
            },
            {
              "name": "n",
              "type": "int",
              "description": "Number of words in each n-gram (default is 2)."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_verse_repetitions",
          "description": "Analyzes verse repetitions within each Surah and across the entire Quran.",
          "parameters": [
            {
              "name": "preprocessed_text",
              "type": "str",
              "description": "The preprocessed Quran text, with each line representing a verse."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_lemmas",
          "description": "Performs lemma analysis on the preprocessed Quran text and returns a summary.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "analyze_surah_verse_counts",
          "description": "Analyzes verse counts per Surah and returns a formatted summary.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The Quran text loaded from the data file."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "analyze_verse_lengths_distribution",
          "description": "Analyzes verse length distribution across the Quran text and identifies consistency per Surah.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text, with each line representing a verse."
            },
            {
              "name": "threshold",
              "type": "number",
              "description": "Standard deviation threshold to consider a Surah as having consistent verse lengths (default is 2)."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_palindromes",
          "description": "Analyzes palindromic structures within each verse of the Quran.",
          "parameters": [
            {
              "name": "quran_text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "list"
        },
        {
          "name": "analyze_abjad_numerals",
          "description": "Performs Abjad numeral analysis on the Quran text and logs notable numerical patterns.",
          "parameters": [
            {
              "name": "quran_text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "list"
        },
        {
          "name": "analyze_semantic_symmetry",
          "description": "Analyzes semantic symmetry (word overlap) between halves of each Surah.",
          "parameters": [
            {
              "name": "quran_text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "list"
        },
        {
          "name": "analyze_verse_length_symmetry",
          "description": "Analyzes verse length symmetry between two halves of each Surah.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text with each line representing a verse."
            },
            {
              "name": "avg_threshold",
              "type": "number",
              "description": "Maximum allowed difference in average verse length (default 1.0)."
            },
            {
              "name": "stddev_threshold",
              "type": "number",
              "description": "Maximum allowed difference in verse length standard deviation (default 1.0)."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_enhanced_semantic_symmetry",
          "description": "Performs enhanced analysis of semantic symmetry using lemma overlap between halves of each Surah.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            },
            {
              "name": "symmetry_threshold",
              "type": "number",
              "description": "The minimum normalized overlap required to consider semantic symmetry (default 0.3)."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_muqattaat",
          "description": "Analyzes Muqatta'at in the Quran text and returns a mapping of Surahs to their Muqatta'at letters and a frequency counter.",
          "parameters": [
            {
              "name": "quran_text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "tuple"
        },
        {
          "name": "analyze_muqattaat_preceding_context",
          "description": "Analyzes verses preceding Surahs with Muqatta'at and returns word frequency analysis.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_muqattaat_themes",
          "description": "Performs thematic analysis for Surahs with Muqatta'at and logs theme information.",
          "parameters": [],
          "return_type": "None"
        },
        {
          "name": "analyze_muqattaat_context",
          "description": "Analyzes verses following Muqatta'at in Surahs and returns word frequency analysis.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_muqattaat_numerical_values",
          "description": "Performs numerical analysis specific to Muqatta'at and returns a summary.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "calculate_abjad_value",
          "description": "Calculates the Abjad numerical value of a given Arabic letter sequence.",
          "parameters": [
            {
              "name": "sequence",
              "type": "str",
              "description": "A string of Arabic letters representing the Muqatta'at sequence."
            }
          ],
          "return_type": "int"
        },
        {
          "name": "get_surah_verse_counts",
          "description": "Computes verse counts for each Surah in the Quran text.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The Quran text with verses per line."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_muqattaat_verse_count_correlation",
          "description": "Analyzes the correlation between Muqatta'at Abjad value and Surah verse count.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "analyze_muqattaat_root_cooccurrence",
          "description": "Analyzes co-occurrence of Muqatta'at with frequent root words in specified Surahs and logs results.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            },
            {
              "name": "top_n",
              "type": "int",
              "description": "Number of top root words to consider (default 5)."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "analyze_muqattaat_sequences",
          "description": "Analyzes and counts the frequency of Muqatta'at sequences in the Quran text.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_muqattaat_length",
          "description": "Analyzes Muqatta'at sequence lengths in the Quran text and logs analysis details.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "categorize_surahs_by_muqattaat",
          "description": "Categorizes Surahs into those with and without Muqatta'at.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "tuple"
        },
        {
          "name": "analyze_grouped_root_frequencies",
          "description": "Computes grouped Arabic root word frequencies for specified Surahs.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            },
            {
              "name": "surahs",
              "type": "list",
              "description": "List of Surah numbers to include in the analysis."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_grouped_lemma_frequencies",
          "description": "Computes grouped lemma frequencies for specified Surahs.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            },
            {
              "name": "surahs",
              "type": "list",
              "description": "List of Surah numbers to include in the analysis."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "compare_surahs_muqattaat_vs_non_muqattaat",
          "description": "Compares Surahs with and without Muqatta'at, including average verse lengths and top word frequencies.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_correlations",
          "description": "Analyzes correlations across various analytical dimensions (stub implementation).",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            },
            {
              "name": "verse_lengths",
              "type": "dict",
              "description": "Results from verse length analysis."
            },
            {
              "name": "muqattaat_data",
              "type": "dict",
              "description": "Results from Muqatta'at analysis."
            },
            {
              "name": "word_frequency_result",
              "type": "tuple",
              "description": "Results from word frequency analysis."
            },
            {
              "name": "flagged_words",
              "type": "list",
              "description": "Flagged words from frequency analysis."
            },
            {
              "name": "verse_repetitions_data",
              "type": "dict",
              "description": "Results from verse repetitions analysis."
            },
            {
              "name": "enhanced_symmetry_data",
              "type": "dict",
              "description": "Results from enhanced semantic symmetry analysis."
            },
            {
              "name": "abjad_anomalies",
              "type": "list",
              "description": "Results from Abjad numeral analysis."
            }
          ],
          "return_type": "list"
        },
        {
          "name": "analyze_muqattaat_distribution_meccan_medinan",
          "description": "Analyzes distribution of Muqatta'at across Meccan and Medinan Surahs.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            },
            {
              "name": "surah_classification",
              "type": "dict",
              "description": "Dictionary mapping Surah numbers to their classification."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "analyze_muqattaat_positions",
          "description": "Analyzes positions of Muqatta'at within the Quran text (placeholder).",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "generate_muqattaat_report",
          "description": "Generates a comprehensive final report synthesizing all Muqatta'at analyses.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "review_muqattaat_report",
          "description": "Reviews the final Muqatta'at report and returns final conclusions.",
          "parameters": [
            {
              "name": "report_content",
              "type": "str",
              "description": "The complete content of the final Muqatta'at report."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "synthesize_muqattaat_analyses",
          "description": "Synthesizes results from multiple Muqatta'at analyses to identify correlations and patterns.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "analyze_muqattaat_semantic_similarity",
          "description": "Analyzes semantic similarity among Surahs sharing the same Muqatta'at.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            },
            {
              "name": "muqattaat_data",
              "type": "dict",
              "description": "Mapping of Surah numbers to their Muqatta'at letters."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "compare_interpretations_with_analysis",
          "description": "Compares scholarly interpretations of Muqatta'at with analysis findings.",
          "parameters": [
            {
              "name": "interpretations",
              "type": "dict",
              "description": "Dictionary of interpretations with source and summary."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "finalize_muqattaat_analysis",
          "description": "Synthesizes all Muqatta'at analyses and formulates a final conclusion regarding the Muqatta'at mystery.",
          "parameters": [],
          "return_type": "str"
        }
      ],
      "dependencies": [
        "src/logger",
        "src/text_preprocessor"
      ]
    },
    {
      "path": "src/logger.py",
      "language": "python",
      "description": "Module for logging analysis outputs of the Quran Secrets application. Provides functions to log secret findings, results, and bigram frequencies into a log file with timestamps.",
      "classes": [],
      "functions": [
        {
          "name": "log_secret_found",
          "description": "Logs a secret finding to the results.log file with a special tag and a timestamp.",
          "parameters": [
            {
              "name": "message",
              "type": "str",
              "description": "The secret message to log."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "log_result",
          "description": "Logs a result message to the results.log file with a timestamp.",
          "parameters": [
            {
              "name": "message",
              "type": "str",
              "description": "The result message to log."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "log_bigram_frequencies",
          "description": "Logs the top N most frequent bigrams to the results log file including header and frequency counts for the top N bigrams.",
          "parameters": [
            {
              "name": "bigram_frequencies",
              "type": "dict",
              "description": "A dictionary mapping bigram tuples to frequency counts."
            },
            {
              "name": "top_n",
              "type": "int",
              "description": "The number of top bigrams to log (default is 20)."
            }
          ],
          "return_type": "None"
        }
      ],
      "dependencies": []
    },
    {
      "path": "tests/__init__.py",
      "language": "Python",
      "description": "Initialization file for tests directory to mark it as a package and perform any necessary test setup.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "tests/test_file_reader.py",
      "language": "Python",
      "description": "Unit tests for the file_reader module that test reading an existing file and handling errors for non-existing files.",
      "classes": [
        {
          "name": "TestFileReader",
          "description": "Unit test class for testing the file_reader module including tests for reading existing files and error handling when files do not exist.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "test_read_existing_file",
              "description": "Test reading an existing file returns correct content.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_read_non_existing_file",
              "description": "Test that reading a non-existing file raises an IOError.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/file_reader.py"
      ]
    },
    {
      "path": "tests/test_text_preprocessor.py",
      "language": "Python",
      "description": "Unit tests for the text_preprocessor module testing the removal of diacritics and normalization of Arabic letters.",
      "classes": [
        {
          "name": "TestTextPreprocessor",
          "description": "Unit test class for the text_preprocessor module, ensuring proper functionality of diacritics removal and Arabic letter normalization.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "test_remove_diacritics",
              "description": "Test removal of Arabic diacritics from text.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_normalize_arabic_letters",
              "description": "Test normalization of specific Arabic letters in text.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/text_preprocessor.py"
      ]
    },
    {
      "path": "tests/test_analyzer.py",
      "language": "Python",
      "description": "Unit tests for the analyzer module. Contains test cases for all functions in the analyzer module using the unittest framework.",
      "classes": [
        {
          "name": "TestAnalyzer",
          "description": "Test suite for the analyzer module covering functions such as text analysis, word frequency, Arabic root analysis, bigrams, palindromes, Abjad numerals, semantic symmetry, verse repetitions, Muqatta'at analyses, and interpretation comparisons.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "setUp",
              "description": "Initialize test environment for analyzer tests.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_non_empty",
              "description": "Test that a non-empty text returns a simulated anomaly.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_empty",
              "description": "Test that an empty text returns no anomalies.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_word_frequency_summary",
              "description": "Test that word frequency analysis returns a proper summary and flagged list.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_word_frequency_with_flags",
              "description": "Test that word frequency analysis flags unusual word frequencies.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_root_words_empty",
              "description": "Test Arabic root word analysis on empty text.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_root_words_sample",
              "description": "Test Arabic root word analysis on sample text with a mocked CAMeL Tools analyzer.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_bigrams_empty",
              "description": "Test that analyze_bigrams returns an empty dictionary when provided an empty or insufficient tokenized text.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_bigrams_sample",
              "description": "Test analyze_bigrams with a sample tokenized text for correct bigram generation and frequency counting.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_palindromes_detects_palindrome",
              "description": "Test that analyze_palindromes detects palindromic words and phrases.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_abjad_numerals_detects_patterns",
              "description": "Test that analyze_abjad_numerals detects notable numerical patterns.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_semantic_symmetry_detects_symmetry",
              "description": "Test that analyze_semantic_symmetry detects significant word overlap.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_repetitions",
              "description": "Test that analyze_verse_repetitions correctly identifies repetitions both within a Surah and across the Quran.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_lengths_distribution",
              "description": "Test that analyze_verse_lengths_distribution correctly calculates average verse lengths, standard deviation, and flags consistent surahs.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_length_symmetry_symmetry_detected",
              "description": "Test that analyze_verse_length_symmetry detects symmetry when both halves have similar verse lengths.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_length_symmetry_non_symmetric",
              "description": "Test that analyze_verse_length_symmetry returns non-symmetric when verse lengths differ significantly.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_enhanced_semantic_symmetry_symmetry_detected",
              "description": "Test that analyze_enhanced_semantic_symmetry detects semantic symmetry when lemma overlap is high.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_enhanced_semantic_symmetry_low_symmetry",
              "description": "Test that analyze_enhanced_semantic_symmetry returns a low symmetry score when lemma overlap is minimal.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_muqattaat_semantic_similarity",
              "description": "Test the Muqatta'at semantic similarity function with a sample group of Surahs.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_compare_interpretations_with_analysis",
              "description": "Test the compare_interpretations_with_analysis function using different scholarly interpretations.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src.analyzer",
        "unittest",
        "unittest.mock"
      ]
    },
    {
      "path": "tests/test_logger.py",
      "language": "Python",
      "description": "This file contains unit tests for the logger module. It tests the functionality of logging secret findings and general results. The tests use unittest framework with mocking to isolate the tests from actual file operations and datetime dependencies.",
      "classes": [
        {
          "name": "TestLogger",
          "description": "A test class that contains test cases for the logger module. It verifies that the logging functions correctly format and write messages to the log file.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "setUp",
              "description": "Initializes the test environment by setting maxDiff to None to see full diff output in case of test failures.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_log_secret_found",
              "description": "Tests that the log_secret_found function correctly formats and writes a message about a potential secret to the log file. It mocks the datetime and file operations to verify the exact output.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestLogger",
                  "description": "Instance of the test class"
                },
                {
                  "name": "mock_datetime",
                  "type": "MagicMock",
                  "description": "Mocked datetime module to provide a fixed timestamp"
                },
                {
                  "name": "mock_file",
                  "type": "MagicMock",
                  "description": "Mocked file open function to capture file writes"
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_log_result",
              "description": "Tests that the log_result function correctly formats and writes a general result message to the log file. It mocks the datetime and file operations to verify the exact output.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestLogger",
                  "description": "Instance of the test class"
                },
                {
                  "name": "mock_datetime",
                  "type": "MagicMock",
                  "description": "Mocked datetime module to provide a fixed timestamp"
                },
                {
                  "name": "mock_file",
                  "type": "MagicMock",
                  "description": "Mocked file open function to capture file writes"
                }
              ],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "unittest",
        "os",
        "unittest.mock",
        "src.logger"
      ]
    },
    {
      "path": "tests/test_main.py",
      "language": "Python",
      "description": "Integration test for the main module to execute end-to-end analysis of the Quran Secrets application.",
      "classes": [
        {
          "name": "TestMainIntegration",
          "description": "Test cases for end-to-end integration of the Quran Secrets application.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "setUp",
              "description": "Setup method to configure test environment.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_main_integration_fallback",
              "description": "Tests full execution of main() using CAMeL Tools fallback.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_main_integration_with_camel_tools",
              "description": "Tests full execution of main() when CAMeL Tools are available.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_compare_surahs_muqattaat_vs_non_muqattaat",
              "description": "Tests comparison function for categorizing Surahs with and without Muqatta'at.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_finalize_muqattaat_analysis",
              "description": "Tests finalize_muqattaat_analysis() for correct output.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_finalize_muqattaat_analysis_integration",
              "description": "Tests integration of finalize_muqattaat_analysis() within main().",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_compare_interpretations_with_analysis",
              "description": "Tests comparison of scholarly interpretations with analysis findings.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "os",
        "unittest",
        "src/main"
      ]
    },
    {
      "path": "data/quran-uthmani-min.txt",
      "language": "None",
      "description": "Text file containing the Quran text. This file is used as input for the analysis performed by the Quran Secrets application.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "src/data_loader.py",
      "language": "Python",
      "description": "Module for loading data files for the Quran Secrets application. Contains functions to load JSON data such as Muqatta'at interpretations.",
      "classes": [],
      "functions": [
        {
          "name": "load_muqattaat_interpretations",
          "description": "Loads and returns scholarly interpretations of Muqatta'at from a JSON file.",
          "parameters": [],
          "return_type": "dict"
        }
      ],
      "dependencies": [
        "os",
        "json"
      ]
    },
    {
      "path": "data/muqattaat_interpretations.json",
      "language": "JSON",
      "description": "JSON file containing scholarly interpretations of the Muqatta'at. Includes interpretations from Ibn Kathir, Al-Suyuti, and modern linguistic scholars.",
      "classes": [],
      "functions": [],
      "dependencies": []
    }
  ]
}