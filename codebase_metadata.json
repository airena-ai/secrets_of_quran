{
  "files": [
    {
      "path": "setup.py",
      "language": "Python",
      "description": "Setup file for Quran Secrets package. Contains configuration details for packaging and installation of the Quran Secrets application.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "requirements.txt",
      "language": "None",
      "description": "Lists package dependencies required for the project, including camel-tools. This file is used by pip to install required packages.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "src/__init__.py",
      "language": "Python",
      "description": "Initialization file for quran_secrets package, used to mark the src directory as a Python package and perform any package-level initializations if required.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "src/main.py",
      "language": "Python",
      "description": "Main driver for the Quran Secrets application. Initiates file reading, text preprocessing, and analysis routines while logging output and anomalies. Handles errors gracefully.",
      "classes": [],
      "functions": [
        {
          "name": "main",
          "description": "Main entry point for the Quran Secrets analysis. Reads input text, preprocesses it, runs anomaly and word frequency analyses, logs results, and outputs a completion message.",
          "parameters": [],
          "return_type": "None"
        }
      ],
      "dependencies": [
        "src/file_reader.py",
        "src/text_preprocessor.py",
        "src/analyzer.py",
        "src/logger.py"
      ]
    },
    {
      "path": "src/file_reader.py",
      "language": "Python",
      "description": "Module for reading the Quran text from a file. Contains a function to open a file and return its contents, or raise an IOError if the file cannot be read.",
      "classes": [],
      "functions": [
        {
          "name": "read_quran_text",
          "description": "Read and return the text from the specified Quran file. Raises an IOError if the file cannot be read.",
          "parameters": [
            {
              "name": "file_path",
              "type": "str",
              "description": "The path to the Quran text file."
            }
          ],
          "return_type": "str"
        }
      ],
      "dependencies": []
    },
    {
      "path": "src/text_preprocessor.py",
      "language": "Python",
      "description": "This module provides functionality for preprocessing and normalizing Arabic text. It includes functions to remove diacritics and normalize specific Arabic letters according to certain rules. The module is designed to standardize Arabic text for further processing in NLP or text analysis applications.",
      "classes": [],
      "functions": [
        {
          "name": "remove_diacritics",
          "description": "Removes all Arabic diacritical marks (tashkeel) from the input text. These marks include fatha, kasra, damma, sukun, shadda, and other vowel marks that appear above or below letters in Arabic script. The function uses regular expressions to identify and remove these marks.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The original Arabic text containing diacritics that need to be removed."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "normalize_arabic_letters",
          "description": "Normalizes specific Arabic letters in the given text according to contextual rules. It specifically handles two cases: 1) Converting the Arabic letter 'ى' (alef maqsura, U+0649) to 'ي' (yeh, U+064A) only when it appears as a standalone word, and 2) Converting the Arabic letter 'ة' (teh marbuta, U+0629) to 'ه' (heh, U+0647) when it appears at the end of words. This normalization helps standardize text variations that are semantically equivalent in Arabic.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The Arabic text to be normalized."
            }
          ],
          "return_type": "str"
        }
      ],
      "dependencies": [
        "re"
      ]
    },
    {
      "path": "src/analyzer.py",
      "language": "Python",
      "description": "This module provides functionality for analyzing Quran text to detect patterns, anomalies, and perform linguistic analysis. It includes functions for basic text analysis, word frequency analysis, and Arabic root word analysis using CAMeL Tools when available, with graceful fallbacks when the library is not present.",
      "classes": [],
      "functions": [
        {
          "name": "analyze_text",
          "description": "Analyzes the given text for hidden numerical patterns and anomalies. This function simulates pattern detection by returning a predefined anomaly message for non-empty text input.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed text of the Quran to analyze."
            }
          ],
          "return_type": "list"
        },
        {
          "name": "analyze_word_frequency",
          "description": "Performs word frequency analysis on the given text by tokenizing it, counting word occurrences, and identifying unusual frequency patterns. It identifies words with frequencies significantly higher or lower than the average of top words.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text to analyze."
            }
          ],
          "return_type": "tuple"
        },
        {
          "name": "analyze_root_words",
          "description": "Performs Arabic root word analysis on the given text using CAMeL Tools morphological analyzer when available. It extracts and counts root words, then returns frequency analysis and logs the results. Includes fallback behavior when CAMeL Tools is not available.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text to analyze."
            }
          ],
          "return_type": "tuple"
        }
      ],
      "dependencies": [
        "collections.Counter",
        "datetime",
        "importlib.util",
        "src.logger"
      ]
    },
    {
      "path": "src/logger.py",
      "language": "Python",
      "description": "Module for logging analysis outputs of the Quran Secrets application. Provides functions to log secret findings and results with timestamps to a log file.",
      "classes": [],
      "functions": [
        {
          "name": "log_secret_found",
          "description": "Logs a secret finding to the results.log file with a timestamp and a special tag. Handles exceptions while logging.",
          "parameters": [
            {
              "name": "message",
              "type": "str",
              "description": "The secret message to log."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "log_result",
          "description": "Logs a result message to the results.log file with a timestamp. Handles exceptions while logging.",
          "parameters": [
            {
              "name": "message",
              "type": "str",
              "description": "The result message to log."
            }
          ],
          "return_type": "None"
        }
      ],
      "dependencies": []
    },
    {
      "path": "tests/__init__.py",
      "language": "Python",
      "description": "Initialization file for tests directory to mark it as a package and perform any necessary test setup.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "tests/test_file_reader.py",
      "language": "Python",
      "description": "Unit tests for the file_reader module that test reading an existing file and handling errors for non-existing files.",
      "classes": [
        {
          "name": "TestFileReader",
          "description": "Unit test class for testing the file_reader module including tests for reading existing files and error handling when files do not exist.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "test_read_existing_file",
              "description": "Test reading an existing file returns correct content.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_read_non_existing_file",
              "description": "Test that reading a non-existing file raises an IOError.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/file_reader.py"
      ]
    },
    {
      "path": "tests/test_text_preprocessor.py",
      "language": "Python",
      "description": "Unit tests for the text_preprocessor module testing the removal of diacritics and normalization of Arabic letters.",
      "classes": [
        {
          "name": "TestTextPreprocessor",
          "description": "Unit test class for the text_preprocessor module, ensuring proper functionality of diacritics removal and Arabic letter normalization.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "test_remove_diacritics",
              "description": "Test removal of Arabic diacritics from text.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_normalize_arabic_letters",
              "description": "Test normalization of specific Arabic letters in text.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/text_preprocessor.py"
      ]
    },
    {
      "path": "tests/test_analyzer.py",
      "language": "Python",
      "description": "Unit test suite for the analyzer module. Contains test cases for the analyze_text, analyze_word_frequency, and analyze_root_words functions, including tests with mocked dependencies for the CAMeL Tools library.",
      "classes": [
        {
          "name": "TestAnalyzer",
          "description": "Test class containing unit tests for the analyzer module functions. Includes tests for empty and non-empty text inputs, word frequency analysis, and Arabic root word analysis with mocked dependencies.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "setUp",
              "description": "Sets up the test environment by configuring the maximum difference for test assertions.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "The test class instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_non_empty",
              "description": "Tests that analyze_text returns a simulated anomaly for non-empty text input.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "The test class instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_empty",
              "description": "Tests that analyze_text returns an empty list for empty text input.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "The test class instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_word_frequency_summary",
              "description": "Tests that analyze_word_frequency returns a proper summary and flagged list.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "The test class instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_word_frequency_with_flags",
              "description": "Tests that analyze_word_frequency correctly flags unusual word frequencies.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "The test class instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_root_words_empty",
              "description": "Tests Arabic root word analysis on empty text with mocked dependencies.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "The test class instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_root_words_sample",
              "description": "Tests Arabic root word analysis on sample text with mocked CAMeL Tools analyzer.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "The test class instance."
                }
              ],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "unittest",
        "unittest.mock",
        "src.analyzer",
        "importlib.util"
      ]
    },
    {
      "path": "tests/test_logger.py",
      "language": "Python",
      "description": "This file contains unit tests for the logger module. It tests the functionality of logging secret findings and general results. The tests use unittest framework with mocking to isolate the tests from actual file operations and datetime dependencies.",
      "classes": [
        {
          "name": "TestLogger",
          "description": "A test class that contains test cases for the logger module. It verifies that the logging functions correctly format and write messages to the log file.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "setUp",
              "description": "Initializes the test environment by setting maxDiff to None to see full diff output in case of test failures.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_log_secret_found",
              "description": "Tests that the log_secret_found function correctly formats and writes a message about a potential secret to the log file. It mocks the datetime and file operations to verify the exact output.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestLogger",
                  "description": "Instance of the test class"
                },
                {
                  "name": "mock_datetime",
                  "type": "MagicMock",
                  "description": "Mocked datetime module to provide a fixed timestamp"
                },
                {
                  "name": "mock_file",
                  "type": "MagicMock",
                  "description": "Mocked file open function to capture file writes"
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_log_result",
              "description": "Tests that the log_result function correctly formats and writes a general result message to the log file. It mocks the datetime and file operations to verify the exact output.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestLogger",
                  "description": "Instance of the test class"
                },
                {
                  "name": "mock_datetime",
                  "type": "MagicMock",
                  "description": "Mocked datetime module to provide a fixed timestamp"
                },
                {
                  "name": "mock_file",
                  "type": "MagicMock",
                  "description": "Mocked file open function to capture file writes"
                }
              ],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "unittest",
        "os",
        "unittest.mock",
        "src.logger"
      ]
    },
    {
      "path": "tests/test_main.py",
      "language": "Python",
      "description": "Integration test module for the main module that tests the end-to-end functionality of the Arabic text analysis system. It contains tests for both scenarios: when CAMeL Tools is available and when it's not available (fallback mode). The tests create sample Arabic text files, execute the main function, and verify that the expected analysis results are present in the output log file.",
      "classes": [
        {
          "name": "TestMainIntegration",
          "description": "Test class that contains integration tests for the main module. It tests the full execution flow of the main function in different scenarios, including with and without CAMeL Tools available for Arabic root word analysis.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "setUp",
              "description": "Setup method that runs before each test to configure the test environment, specifically setting maxDiff to None to allow for full diff display in test failures.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_main_integration_fallback",
              "description": "Tests the main function's execution when CAMeL Tools is not available, verifying that the fallback mechanism works correctly. It creates a sample Arabic text file, mocks the import check to simulate CAMeL Tools being unavailable, runs the main function, and verifies expected log outputs.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_main_integration_with_camel_tools",
              "description": "Tests the main function's execution when CAMeL Tools is available, verifying that Arabic root word analysis is performed correctly. It creates a sample Arabic text file, mocks CAMeL Tools and its analyzer to return predefined root words, runs the main function, and verifies expected log outputs including the specific roots returned by the mock analyzer.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "os",
        "unittest",
        "unittest.mock",
        "importlib.util",
        "src.main"
      ]
    },
    {
      "path": "data/quran-uthmani-min.txt",
      "language": "None",
      "description": "Text file containing the Quran text. This file is used as input for the analysis performed by the Quran Secrets application.",
      "classes": [],
      "functions": [],
      "dependencies": []
    }
  ]
}