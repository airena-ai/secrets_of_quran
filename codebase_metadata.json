{
  "files": [
    {
      "path": "setup.py",
      "language": "Python",
      "description": "Setup file for Quran Secrets package. Contains configuration details for packaging and installation of the Quran Secrets application.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "requirements.txt",
      "language": "None",
      "description": "List of python package dependencies required by the Quran Secrets application. Contains camel_tools package.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "src/__init__.py",
      "language": "Python",
      "description": "Initialization file for quran_secrets package, used to mark the src directory as a Python package and perform any package-level initializations if required.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "src/main.py",
      "language": "Python",
      "description": "Main driver module for the Quran Secrets application. It orchestrates the entire analysis process by loading the Quran text, preprocessing it, and then running various analytical functions to discover patterns, anomalies, and potential secrets in the text. The module handles UTF-8 encoding configuration to properly display Arabic characters, performs a wide range of analyses including word frequency, root word analysis, bigram analysis, verse repetitions, palindromes, abjad numerals, semantic symmetry, and extensive Muqatta'at (disconnected letters) analysis. It generates comprehensive reports and logs findings throughout the process.",
      "classes": [],
      "functions": [
        {
          "name": "main",
          "description": "Main entry point for the Quran Secrets analysis. This function coordinates the entire analysis workflow: configuring UTF-8 encoding for Arabic text, reading the Quran text file, preprocessing the text by removing diacritics and normalizing Arabic letters, and then executing numerous analytical functions. It performs analyses on verse lengths, word frequencies, root words, bigrams, verse repetitions, palindromes, abjad numerals, semantic symmetry, and extensive Muqatta'at (disconnected letters) analysis. The function generates reports of findings, logs results, and writes a comprehensive final report to a text file.",
          "parameters": [],
          "return_type": "None"
        }
      ],
      "dependencies": [
        "sys",
        "src.file_reader",
        "src.text_preprocessor",
        "src.analyzer",
        "src.logger",
        "src.data_loader"
      ]
    },
    {
      "path": "src/file_reader.py",
      "language": "Python",
      "description": "Module for reading the Quran text from a file. Contains a function to open a file and return its contents, or raise an IOError if the file cannot be read.",
      "classes": [],
      "functions": [
        {
          "name": "read_quran_text",
          "description": "Read and return the text from the specified Quran file. Raises an IOError if the file cannot be read.",
          "parameters": [
            {
              "name": "file_path",
              "type": "str",
              "description": "The path to the Quran text file."
            }
          ],
          "return_type": "str"
        }
      ],
      "dependencies": []
    },
    {
      "path": "src/text_preprocessor.py",
      "language": "Python",
      "description": "This module provides functionality for preprocessing and normalizing Arabic text. It includes functions to remove diacritics and normalize specific Arabic letters according to certain rules. The module is designed to standardize Arabic text for further processing in NLP or text analysis applications.",
      "classes": [],
      "functions": [
        {
          "name": "remove_diacritics",
          "description": "Removes all Arabic diacritical marks (tashkeel) from the input text. These marks include fatha, kasra, damma, sukun, shadda, and other vowel marks that appear above or below letters in Arabic script. The function uses regular expressions to identify and remove these marks.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The original Arabic text containing diacritics that need to be removed."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "normalize_arabic_letters",
          "description": "Normalizes specific Arabic letters in the given text according to contextual rules. It specifically handles two cases: 1) Converting the Arabic letter 'ى' (alef maqsura, U+0649) to 'ي' (yeh, U+064A) only when it appears as a standalone word, and 2) Converting the Arabic letter 'ة' (teh marbuta, U+0629) to 'ه' (heh, U+0647) when it appears at the end of words. This normalization helps standardize text variations that are semantically equivalent in Arabic.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The Arabic text to be normalized."
            }
          ],
          "return_type": "str"
        }
      ],
      "dependencies": [
        "re"
      ]
    },
    {
      "path": "src/analyzer.py",
      "language": "Python",
      "description": "Module for analyzing the Quran text for hidden patterns and anomalies. It defines various functions to perform text analysis and extract numerical, semantic, and structural patterns from the Quranic text.",
      "classes": [],
      "functions": [
        {
          "name": "analyze_text",
          "description": "Analyzes the given text for hidden numerical patterns and anomalies. Simulates pattern detection and returns a list of anomaly messages.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed text of the Quran."
            }
          ],
          "return_type": "list"
        },
        {
          "name": "analyze_word_frequency",
          "description": "Performs word frequency analysis on the given preprocessed Quran text and returns a summary string along with a list of flagged unusual words.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "tuple"
        },
        {
          "name": "analyze_root_words",
          "description": "Performs Arabic root word analysis on the given text, counts the frequency of each root, and returns a summary, a dictionary of root frequencies, and a list of top frequent roots.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "tuple"
        },
        {
          "name": "analyze_bigrams",
          "description": "Generates n-grams (bigrams by default) from tokenized text, counts their frequency, and returns a dictionary with n-gram tuples as keys and their frequency counts as values.",
          "parameters": [
            {
              "name": "tokenized_text",
              "type": "list",
              "description": "A list of preprocessed tokens from the text."
            },
            {
              "name": "n",
              "type": "int",
              "description": "The number of words in each n-gram (default is 2 for bigrams)."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_verse_repetitions",
          "description": "Analyzes verse repetitions within each Surah and across the entire Quran by parsing each line for Surah and Ayah numbers. Returns a dictionary with keys 'within_surah' and 'across_quran' detailing repetition occurrences.",
          "parameters": [
            {
              "name": "preprocessed_text",
              "type": "str",
              "description": "The preprocessed Quran text where each line represents a verse."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_lemmas",
          "description": "Extracts lemmas from the given text using CAMeL Tools if available, counts their frequency, and returns a formatted summary of the lemma frequency analysis.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "analyze_surah_verse_counts",
          "description": "Parses the Quran text to count the number of verses per Surah and returns a formatted summary of these counts.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The Quran text loaded from the data file."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "analyze_verse_lengths_distribution",
          "description": "Calculates the word count for each verse per Surah, computes average and standard deviation of verse lengths, and returns a dictionary mapping each Surah to its analysis metrics.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text where each line represents a verse."
            },
            {
              "name": "threshold",
              "type": "int",
              "description": "Standard deviation threshold to consider a Surah as having consistent verse lengths (default is 2)."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_palindromes",
          "description": "Identifies word-level palindromes and palindromic phrases in each verse of the Quran and returns a list of detected palindromic items.",
          "parameters": [
            {
              "name": "quran_text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "list"
        },
        {
          "name": "analyze_abjad_numerals",
          "description": "Calculates Abjad numerical sums for each verse based on Arabic letter values and identifies verses with notable numerical patterns. Returns a list of tuples with detected patterns.",
          "parameters": [
            {
              "name": "quran_text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "list"
        },
        {
          "name": "analyze_semantic_symmetry",
          "description": "Calculates the overlap of unique words between two halves of the Quran text for each Surah, logging the common word counts. Returns a list of findings.",
          "parameters": [
            {
              "name": "quran_text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "list"
        },
        {
          "name": "analyze_verse_length_symmetry",
          "description": "Splits the verses of each Surah into two halves, computes average and standard deviation of verse lengths for both halves, and returns a dictionary with symmetry analysis.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text with each line representing a verse."
            },
            {
              "name": "avg_threshold",
              "type": "float",
              "description": "Maximum allowed difference in average verse length between halves (default 1.0)."
            },
            {
              "name": "stddev_threshold",
              "type": "float",
              "description": "Maximum allowed difference in verse length standard deviation between halves (default 1.0)."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_enhanced_semantic_symmetry",
          "description": "Performs enhanced semantic symmetry analysis using lemma overlap between two halves of each Surah, returning a dictionary with symmetry scores and lemma sets.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text with each line representing a verse."
            },
            {
              "name": "symmetry_threshold",
              "type": "float",
              "description": "Minimum normalized overlap required to consider semantic symmetry (default 0.3)."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_muqattaat",
          "description": "Identifies Surahs that begin with Muqatta'at, extracts the corresponding letter sequences, and returns a tuple containing a mapping of Surah numbers to their Muqatta'at letters and a frequency counter.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "tuple"
        },
        {
          "name": "analyze_muqattaat_preceding_context",
          "description": "Extracts and analyzes the verses immediately preceding Surahs with Muqatta'at, performing word frequency analysis. Returns a dictionary of word frequencies.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text with each line as a verse."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_muqattaat_themes",
          "description": "Performs thematic analysis for Surahs with Muqatta'at by associating each Surah with a predefined theme and logging the results.",
          "parameters": [],
          "return_type": "None"
        },
        {
          "name": "analyze_muqattaat_context",
          "description": "Analyzes the verses immediately following the Muqatta'at in Surahs and returns a dictionary mapping words to their frequency counts.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_muqattaat_numerical_values",
          "description": "Performs numerical analysis specific to Muqatta'at, returning a summary string of the numerical observations.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "analyze_muqattaat_root_cooccurrence",
          "description": "Analyzes the co-occurrence of Muqatta'at with frequent root words in specified Surahs and logs the structured results. Does not return a value.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            },
            {
              "name": "top_n",
              "type": "int",
              "description": "Number of top root words to consider (default is 5)."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "analyze_muqattaat_sequences",
          "description": "Counts the frequency of Muqatta'at sequences in the Quran text and returns a dictionary where each unique sequence is mapped to its occurrence count.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_muqattaat_length",
          "description": "Analyzes the lengths of Muqatta'at sequences and logs categorization details such as frequency distribution and unique length surahs. Does not return a value.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "categorize_surahs_by_muqattaat",
          "description": "Categorizes Surahs into those with and without Muqatta'at based on extracted Muqatta'at sequences. Returns a tuple containing two lists.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "tuple"
        },
        {
          "name": "analyze_grouped_root_frequencies",
          "description": "Analyzes and aggregates Arabic root word frequencies for the specified Surahs. Returns a dictionary mapping root words to their aggregated counts.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text where each line represents a verse."
            },
            {
              "name": "surahs",
              "type": "list",
              "description": "A list of Surah numbers to include in the analysis."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_grouped_lemma_frequencies",
          "description": "Analyzes and aggregates lemma frequencies for the specified Surahs and returns a dictionary mapping lemmas to frequency counts.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text where each line represents a verse."
            },
            {
              "name": "surahs",
              "type": "list",
              "description": "A list of Surah numbers to include in the analysis."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "compare_surahs_muqattaat_vs_non_muqattaat",
          "description": "Compares Surahs with and without Muqatta'at by computing average verse lengths and top word frequencies. Returns a dictionary containing the comparison results.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_correlations",
          "description": "Analyzes correlations across different analytical dimensions including verse lengths, Muqatta'at data, word frequencies, flagged words, and Abjad numeral anomalies. Returns a list of correlation messages.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            },
            {
              "name": "verse_lengths",
              "type": "dict",
              "description": "Results from verse length analysis."
            },
            {
              "name": "muqattaat_data",
              "type": "dict",
              "description": "Results from Muqatta'at analysis."
            },
            {
              "name": "word_frequency_result",
              "type": "tuple",
              "description": "Results from word frequency analysis as a tuple containing a summary and flagged words."
            },
            {
              "name": "flagged_words",
              "type": "list",
              "description": "List of flagged unusual words from frequency analysis."
            },
            {
              "name": "verse_repetitions_data",
              "type": "dict",
              "description": "Results from verse repetition analysis."
            },
            {
              "name": "enhanced_symmetry_data",
              "type": "dict",
              "description": "Results from enhanced semantic symmetry analysis."
            },
            {
              "name": "abjad_anomalies",
              "type": "list",
              "description": "Results from Abjad numeral analysis."
            }
          ],
          "return_type": "list"
        },
        {
          "name": "analyze_muqattaat_distribution_meccan_medinan",
          "description": "Analyzes the distribution of Muqatta'at across Meccan and Medinan Surahs using a surah classification dictionary. Returns a summary string of the distribution analysis.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            },
            {
              "name": "surah_classification",
              "type": "dict",
              "description": "A dictionary mapping Surah numbers to their classification (Meccan or Medinan)."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "analyze_muqattaat_positions",
          "description": "Analyzes the positions of Muqatta'at within the Quran text and returns a summary string. (Functionality is a placeholder.)",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "generate_muqattaat_report",
          "description": "Generates a comprehensive final report synthesizing all Muqatta'at analyses and logs the report. Does not return a value.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "review_muqattaat_report",
          "description": "Reviews the final Muqatta'at report content and returns final conclusions regarding the Muqatta'at mystery.",
          "parameters": [
            {
              "name": "report_content",
              "type": "str",
              "description": "The complete content of the final Muqatta'at report."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "synthesize_muqattaat_analyses",
          "description": "Aggregates and synthesizes results from multiple Muqatta'at analysis functions to identify potential correlations and patterns. Does not return a value.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "analyze_muqattaat_semantic_similarity",
          "description": "Analyzes semantic similarity among Surahs sharing the same Muqatta'at by grouping them and computing similarity scores. Returns a dictionary mapping Muqatta'at sequences to lists of Surahs.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            },
            {
              "name": "muqattaat_data",
              "type": "dict",
              "description": "Mapping of Surah numbers to their Muqatta'at letters."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "compare_interpretations_with_analysis",
          "description": "Compares scholarly interpretations of Muqatta'at with the analysis findings and logs the comparison. Does not return a value.",
          "parameters": [
            {
              "name": "interpretations",
              "type": "dict",
              "description": "Dictionary of interpretations with sources and summaries."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "finalize_muqattaat_analysis",
          "description": "Synthesizes all Muqatta'at analyses and formulates a final conclusive statement regarding the Muqatta'at mystery. Returns the final conclusion string.",
          "parameters": [],
          "return_type": "str"
        }
      ],
      "dependencies": [
        "collections",
        "datetime",
        "importlib.util",
        "re",
        "math",
        "src.logger",
        "src.text_preprocessor"
      ]
    },
    {
      "path": "src/logger.py",
      "language": "python",
      "description": "Module for logging analysis outputs of the Quran Secrets application. Provides functions to log secret findings, results, and bigram frequencies into a log file with timestamps.",
      "classes": [],
      "functions": [
        {
          "name": "log_secret_found",
          "description": "Logs a secret finding to the results.log file with a special tag and a timestamp.",
          "parameters": [
            {
              "name": "message",
              "type": "str",
              "description": "The secret message to log."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "log_result",
          "description": "Logs a result message to the results.log file with a timestamp.",
          "parameters": [
            {
              "name": "message",
              "type": "str",
              "description": "The result message to log."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "log_bigram_frequencies",
          "description": "Logs the top N most frequent bigrams to the results log file including header and frequency counts for the top N bigrams.",
          "parameters": [
            {
              "name": "bigram_frequencies",
              "type": "dict",
              "description": "A dictionary mapping bigram tuples to frequency counts."
            },
            {
              "name": "top_n",
              "type": "int",
              "description": "The number of top bigrams to log (default is 20)."
            }
          ],
          "return_type": "None"
        }
      ],
      "dependencies": []
    },
    {
      "path": "tests/__init__.py",
      "language": "Python",
      "description": "Initialization file for tests directory to mark it as a package and perform any necessary test setup.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "tests/test_file_reader.py",
      "language": "Python",
      "description": "Unit tests for the file_reader module that test reading an existing file and handling errors for non-existing files.",
      "classes": [
        {
          "name": "TestFileReader",
          "description": "Unit test class for testing the file_reader module including tests for reading existing files and error handling when files do not exist.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "test_read_existing_file",
              "description": "Test reading an existing file returns correct content.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_read_non_existing_file",
              "description": "Test that reading a non-existing file raises an IOError.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/file_reader.py"
      ]
    },
    {
      "path": "tests/test_text_preprocessor.py",
      "language": "Python",
      "description": "Unit tests for the text_preprocessor module testing the removal of diacritics and normalization of Arabic letters.",
      "classes": [
        {
          "name": "TestTextPreprocessor",
          "description": "Unit test class for the text_preprocessor module, ensuring proper functionality of diacritics removal and Arabic letter normalization.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "test_remove_diacritics",
              "description": "Test removal of Arabic diacritics from text.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_normalize_arabic_letters",
              "description": "Test normalization of specific Arabic letters in text.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/text_preprocessor.py"
      ]
    },
    {
      "path": "tests/test_analyzer.py",
      "language": "Python",
      "description": "Unit tests for the analyzer module. Contains test cases for all functions in the analyzer module using the unittest framework.",
      "classes": [
        {
          "name": "TestAnalyzer",
          "description": "Test suite for the analyzer module covering functions such as text analysis, word frequency, Arabic root analysis, bigrams, palindromes, Abjad numerals, semantic symmetry, verse repetitions, Muqatta'at analyses, and interpretation comparisons.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "setUp",
              "description": "Initialize test environment for analyzer tests.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_non_empty",
              "description": "Test that a non-empty text returns a simulated anomaly.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_empty",
              "description": "Test that an empty text returns no anomalies.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_word_frequency_summary",
              "description": "Test that word frequency analysis returns a proper summary and flagged list.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_word_frequency_with_flags",
              "description": "Test that word frequency analysis flags unusual word frequencies.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_root_words_empty",
              "description": "Test Arabic root word analysis on empty text.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_root_words_sample",
              "description": "Test Arabic root word analysis on sample text with a mocked CAMeL Tools analyzer.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_bigrams_empty",
              "description": "Test that analyze_bigrams returns an empty dictionary when provided an empty or insufficient tokenized text.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_bigrams_sample",
              "description": "Test analyze_bigrams with a sample tokenized text for correct bigram generation and frequency counting.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_palindromes_detects_palindrome",
              "description": "Test that analyze_palindromes detects palindromic words and phrases.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_abjad_numerals_detects_patterns",
              "description": "Test that analyze_abjad_numerals detects notable numerical patterns.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_semantic_symmetry_detects_symmetry",
              "description": "Test that analyze_semantic_symmetry detects significant word overlap.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_repetitions",
              "description": "Test that analyze_verse_repetitions correctly identifies repetitions both within a Surah and across the Quran.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_lengths_distribution",
              "description": "Test that analyze_verse_lengths_distribution correctly calculates average verse lengths, standard deviation, and flags consistent surahs.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_length_symmetry_symmetry_detected",
              "description": "Test that analyze_verse_length_symmetry detects symmetry when both halves have similar verse lengths.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_length_symmetry_non_symmetric",
              "description": "Test that analyze_verse_length_symmetry returns non-symmetric when verse lengths differ significantly.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_enhanced_semantic_symmetry_symmetry_detected",
              "description": "Test that analyze_enhanced_semantic_symmetry detects semantic symmetry when lemma overlap is high.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_enhanced_semantic_symmetry_low_symmetry",
              "description": "Test that analyze_enhanced_semantic_symmetry returns a low symmetry score when lemma overlap is minimal.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_muqattaat_semantic_similarity",
              "description": "Test the Muqatta'at semantic similarity function with a sample group of Surahs.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_compare_interpretations_with_analysis",
              "description": "Test the compare_interpretations_with_analysis function using different scholarly interpretations.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src.analyzer",
        "unittest",
        "unittest.mock"
      ]
    },
    {
      "path": "tests/test_logger.py",
      "language": "Python",
      "description": "This file contains unit tests for the logger module. It tests the functionality of logging secret findings and general results. The tests use unittest framework with mocking to isolate the tests from actual file operations and datetime dependencies.",
      "classes": [
        {
          "name": "TestLogger",
          "description": "A test class that contains test cases for the logger module. It verifies that the logging functions correctly format and write messages to the log file.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "setUp",
              "description": "Initializes the test environment by setting maxDiff to None to see full diff output in case of test failures.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_log_secret_found",
              "description": "Tests that the log_secret_found function correctly formats and writes a message about a potential secret to the log file. It mocks the datetime and file operations to verify the exact output.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestLogger",
                  "description": "Instance of the test class"
                },
                {
                  "name": "mock_datetime",
                  "type": "MagicMock",
                  "description": "Mocked datetime module to provide a fixed timestamp"
                },
                {
                  "name": "mock_file",
                  "type": "MagicMock",
                  "description": "Mocked file open function to capture file writes"
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_log_result",
              "description": "Tests that the log_result function correctly formats and writes a general result message to the log file. It mocks the datetime and file operations to verify the exact output.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestLogger",
                  "description": "Instance of the test class"
                },
                {
                  "name": "mock_datetime",
                  "type": "MagicMock",
                  "description": "Mocked datetime module to provide a fixed timestamp"
                },
                {
                  "name": "mock_file",
                  "type": "MagicMock",
                  "description": "Mocked file open function to capture file writes"
                }
              ],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "unittest",
        "os",
        "unittest.mock",
        "src.logger"
      ]
    },
    {
      "path": "tests/test_main.py",
      "language": "Python",
      "description": "This file contains integration tests for the main module of the Quran Secrets application. It tests the end-to-end execution of the analysis pipeline, including tests for the main function with and without CAMeL Tools, and specific tests for key analysis functions like compare_surahs_muqattaat_vs_non_muqattaat, finalize_muqattaat_analysis, and compare_interpretations_with_analysis. The tests verify that the application correctly processes Quranic text, identifies patterns in the Muqatta'at letters, and generates comprehensive analysis reports.",
      "classes": [
        {
          "name": "TestMainIntegration",
          "description": "Test class for end-to-end integration testing of the Quran Secrets application. Contains methods to test the main function execution and various analysis components.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "setUp",
              "description": "Setup method that sets the maximum difference for test assertions to None, allowing for full output in case of test failures.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_main_integration_fallback",
              "description": "Tests the full execution of the main() function end-to-end with CAMeL Tools fallback mechanism. Creates a sample Quran text file, runs the main function, and verifies that the results log contains all expected analysis sections.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_main_integration_with_camel_tools",
              "description": "Tests the full execution of main() function when CAMeL Tools is available. Mocks the CAMeL Tools analyzer and verifies that the results log contains all expected analysis sections.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_compare_surahs_muqattaat_vs_non_muqattaat",
              "description": "Tests the compare_surahs_muqattaat_vs_non_muqattaat() function for correct categorization and analysis of Surahs with and without Muqatta'at letters.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_finalize_muqattaat_analysis",
              "description": "Tests the finalize_muqattaat_analysis() function for correct integration and output. Verifies that the function generates a proper conclusion and appends it to the results log.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_finalize_muqattaat_analysis_integration",
              "description": "Tests the integration of finalize_muqattaat_analysis() within the main function. Uses mocking to verify that the function is called during the main execution.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_compare_interpretations_with_analysis",
              "description": "Tests the compare_interpretations_with_analysis() function for correct processing of scholarly interpretations and comparison with analysis results.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "os",
        "unittest",
        "unittest.mock",
        "importlib.util",
        "src.main",
        "src.analyzer"
      ]
    },
    {
      "path": "data/quran-uthmani-min.txt",
      "language": "None",
      "description": "Text file containing the Quran text. This file is used as input for the analysis performed by the Quran Secrets application.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "test/test_main.py",
      "language": "Python",
      "description": "Integration tests for the main module executing end-to-end analysis of the Quran Secrets application. Includes tests for fallback scenarios, CAMeL Tools availability, and functionality of comparative analysis functions.",
      "classes": [
        {
          "name": "TestMainIntegration",
          "description": "Test cases for end-to-end integration of the Quran Secrets application.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "setUp",
              "description": "Set maximum diff for assertions and initialize test configurations.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_main_integration_fallback",
              "description": "Test the full execution of main() function end-to-end with CAMeL Tools fallback scenario.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_main_integration_with_camel_tools",
              "description": "Test the full execution of main() function end-to-end with CAMeL Tools available.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_compare_surahs_muqattaat_vs_non_muqattaat",
              "description": "Test compare_surahs_muqattaat_vs_non_muqattaat() for correct categorization and analysis.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "os",
        "unittest",
        "unittest.mock",
        "src.main",
        "importlib.util"
      ]
    },
    {
      "path": "test/analyzer_test.py",
      "language": "Python",
      "description": "Unit tests for the analyzer module. Implements comprehensive tests using the unittest framework to ensure correctness and robustness of analysis functions.",
      "classes": [
        {
          "name": "TestAnalyzer",
          "description": "Unit tests for the analyzer module. Inherits from unittest.TestCase.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "test_analyze_non_empty",
              "description": "Tests that a non-empty text returns a list containing a simulated anomaly.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_empty",
              "description": "Tests that an empty text returns an empty list of anomalies.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_word_frequency_summary",
              "description": "Tests that word frequency analysis returns a proper summary string and a flagged list for sample input.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_word_frequency_with_flags",
              "description": "Tests that word frequency analysis flags words with unusual frequencies in the input text.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_root_words_empty",
              "description": "Tests Arabic root word analysis on empty text ensuring that empty results are returned.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_root_words_sample",
              "description": "Tests Arabic root word analysis on a sample text using a mocked CAMeL Tools analyzer.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_bigrams_empty",
              "description": "Tests that analyze_bigrams returns an empty dictionary for an empty or insufficient token list.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_bigrams_sample",
              "description": "Tests analyze_bigrams with a sample token list to validate correct bigram frequency counts.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_palindromes_detects_palindrome",
              "description": "Tests that palindromic words and phrases are detected correctly in the input text.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_abjad_numerals_detects_patterns",
              "description": "Tests that analyze_abjad_numerals detects notable numerical patterns and logs appropriate messages.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_semantic_symmetry_detects_symmetry",
              "description": "Tests that semantic symmetry analysis detects significant word overlap.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_repetitions",
              "description": "Tests that verse repetition analysis correctly identifies repeated verses within a Surah and across the Quran.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_lengths_distribution",
              "description": "Tests that average verse length and standard deviation are calculated correctly and that consistent surahs are flagged.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_length_symmetry_symmetry_detected",
              "description": "Tests that verse length symmetry analysis detects symmetry when verse lengths are similar.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_length_symmetry_non_symmetric",
              "description": "Tests that verse length symmetry analysis returns non-symmetric when verse lengths differ significantly.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_enhanced_semantic_symmetry_symmetry_detected",
              "description": "Tests that enhanced semantic symmetry analysis detects high lemma overlap and logs a symmetry score.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_enhanced_semantic_symmetry_low_symmetry",
              "description": "Tests that enhanced semantic symmetry analysis returns a low symmetry score when lemma overlap is minimal.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_muqattaat_semantic_similarity",
              "description": "Tests the semantic similarity analysis function for Muqatta'at by checking for high similarity logging between grouped Surahs.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "unittest",
        "unittest.mock",
        "src.analyzer",
        "src.logger"
      ]
    },
    {
      "path": "src/data_loader.py",
      "language": "Python",
      "description": "Module for loading data files for the Quran Secrets application. Contains functions to load JSON data such as Muqatta'at interpretations.",
      "classes": [],
      "functions": [
        {
          "name": "load_muqattaat_interpretations",
          "description": "Loads and returns scholarly interpretations of Muqatta'at from a JSON file.",
          "parameters": [],
          "return_type": "dict"
        }
      ],
      "dependencies": [
        "os",
        "json"
      ]
    },
    {
      "path": "data/muqattaat_interpretations.json",
      "language": "JSON",
      "description": "JSON file containing scholarly interpretations of the Muqatta'at. Includes interpretations from Ibn Kathir, Al-Suyuti, and modern linguistic scholars.",
      "classes": [],
      "functions": [],
      "dependencies": []
    }
  ]
}