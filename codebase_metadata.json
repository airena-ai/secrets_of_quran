{
  "files": [
    {
      "path": "setup.py",
      "language": "Python",
      "description": "Setup file for Quran Secrets package. Contains configuration details for packaging and installation of the Quran Secrets application.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "requirements.txt",
      "language": "None",
      "description": "List of python package dependencies required by the Quran Secrets application. Contains camel_tools package.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "src/__init__.py",
      "language": "Python",
      "description": "Initialization file for quran_secrets package, used to mark the src directory as a Python package and perform any package-level initializations if required.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "src/main.py",
      "language": "python",
      "description": "Main driver for the Quran Secrets application. Coordinates reading the Quran text, preprocessing, and invocation of various analysis functions to generate a comprehensive report.",
      "classes": [],
      "functions": [
        {
          "name": "main",
          "description": "Main entry point for the Quran Secrets analysis, coordinating file reading, text preprocessing, various analyses, and report generation.",
          "parameters": [],
          "return_type": "None"
        }
      ],
      "dependencies": [
        "src.file_reader",
        "src.text_preprocessor",
        "src.analyzer",
        "src.logger"
      ]
    },
    {
      "path": "src/file_reader.py",
      "language": "Python",
      "description": "Module for reading the Quran text from a file. Contains a function to open a file and return its contents, or raise an IOError if the file cannot be read.",
      "classes": [],
      "functions": [
        {
          "name": "read_quran_text",
          "description": "Read and return the text from the specified Quran file. Raises an IOError if the file cannot be read.",
          "parameters": [
            {
              "name": "file_path",
              "type": "str",
              "description": "The path to the Quran text file."
            }
          ],
          "return_type": "str"
        }
      ],
      "dependencies": []
    },
    {
      "path": "src/text_preprocessor.py",
      "language": "Python",
      "description": "This module provides functionality for preprocessing and normalizing Arabic text. It includes functions to remove diacritics and normalize specific Arabic letters according to certain rules. The module is designed to standardize Arabic text for further processing in NLP or text analysis applications.",
      "classes": [],
      "functions": [
        {
          "name": "remove_diacritics",
          "description": "Removes all Arabic diacritical marks (tashkeel) from the input text. These marks include fatha, kasra, damma, sukun, shadda, and other vowel marks that appear above or below letters in Arabic script. The function uses regular expressions to identify and remove these marks.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The original Arabic text containing diacritics that need to be removed."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "normalize_arabic_letters",
          "description": "Normalizes specific Arabic letters in the given text according to contextual rules. It specifically handles two cases: 1) Converting the Arabic letter 'ى' (alef maqsura, U+0649) to 'ي' (yeh, U+064A) only when it appears as a standalone word, and 2) Converting the Arabic letter 'ة' (teh marbuta, U+0629) to 'ه' (heh, U+0647) when it appears at the end of words. This normalization helps standardize text variations that are semantically equivalent in Arabic.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The Arabic text to be normalized."
            }
          ],
          "return_type": "str"
        }
      ],
      "dependencies": [
        "re"
      ]
    },
    {
      "path": "src/analyzer.py",
      "language": "python",
      "description": "Module for analyzing the Quran text for hidden patterns and anomalies. It includes functions for word frequency analysis, Arabic root and lemma extraction, bigram generation, verse repetition detection, palindrome identification, Abjad numeral analysis, semantic symmetry evaluations, and extensive Muqatta'at analyses covering themes, sequences, distribution, and cross-analysis.",
      "classes": [],
      "functions": [
        {
          "name": "analyze_text",
          "description": "Analyze the given text for hidden numerical patterns and anomalies. Returns a list of anomaly messages.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "list"
        },
        {
          "name": "analyze_word_frequency",
          "description": "Perform word frequency analysis on the preprocessed Quran text. Returns a summary string and a list of flagged messages.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "tuple"
        },
        {
          "name": "analyze_root_words",
          "description": "Perform Arabic root word analysis on the Quran text. Returns a summary, a dictionary of root frequencies, and a list of top root word tuples.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "tuple"
        },
        {
          "name": "analyze_bigrams",
          "description": "Generate n-grams from tokenized text and return a dictionary mapping each n-gram tuple to its frequency.",
          "parameters": [
            {
              "name": "tokenized_text",
              "type": "list",
              "description": "A list of preprocessed tokens from the Quran text."
            },
            {
              "name": "n",
              "type": "int",
              "description": "The number of words in each n-gram (default is 2 for bigrams)."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_verse_repetitions",
          "description": "Identify repetitions of verses within Surahs and across the entire Quran. Returns a dictionary with repetition analysis.",
          "parameters": [
            {
              "name": "preprocessed_text",
              "type": "str",
              "description": "The preprocessed Quran text with each line representing a verse."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_lemmas",
          "description": "Perform lemma analysis on the text using morphological analysis and return a formatted summary of lemma frequencies.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "analyze_surah_verse_counts",
          "description": "Calculate and return the count of verses for each Surah in the Quran.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The Quran text loaded from the data file."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "analyze_verse_lengths_distribution",
          "description": "Analyze the distribution of verse lengths for each Surah and return statistics including average, standard deviation, and a consistency flag.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            },
            {
              "name": "threshold",
              "type": "int",
              "description": "The standard deviation threshold to determine consistency of verse lengths (default is 2)."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_palindromes",
          "description": "Detect palindromic words and phrases within each verse and return a list of detected palindromes as tuples.",
          "parameters": [
            {
              "name": "quran_text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "list"
        },
        {
          "name": "analyze_abjad_numerals",
          "description": "Calculate the Abjad numerical sum for each verse and log special patterns. Returns a list of tuples with notable numerical patterns.",
          "parameters": [
            {
              "name": "quran_text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "list"
        },
        {
          "name": "analyze_semantic_symmetry",
          "description": "Analyze word-level semantic symmetry between segments of each Surah and return a list of findings.",
          "parameters": [
            {
              "name": "quran_text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "list"
        },
        {
          "name": "analyze_verse_length_symmetry",
          "description": "Analyze and compare verse length metrics between two halves of each Surah, returning symmetry details.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            },
            {
              "name": "avg_threshold",
              "type": "float",
              "description": "Maximum allowed difference in average verse length between halves (default 1.0)."
            },
            {
              "name": "stddev_threshold",
              "type": "float",
              "description": "Maximum allowed difference in verse length standard deviation between halves (default 1.0)."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_enhanced_semantic_symmetry",
          "description": "Enhanced analysis of semantic symmetry using lemma overlap between two halves of each Surah.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            },
            {
              "name": "symmetry_threshold",
              "type": "float",
              "description": "The minimum normalized lemma overlap required to consider symmetry (default 0.3)."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_muqattaat",
          "description": "Identify Surahs that begin with Muqatta'at and extract their sequences. Returns a tuple containing a mapping of Surah numbers to Muqatta'at letters and a frequency counter.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "tuple"
        },
        {
          "name": "analyze_muqattaat_preceding_context",
          "description": "Extract and analyze word frequencies from the verses preceding Surahs with Muqatta'at.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_muqattaat_themes",
          "description": "Associate predefined themes with Surahs that have Muqatta'at and log the thematic analysis.",
          "parameters": [],
          "return_type": "None"
        },
        {
          "name": "analyze_muqattaat_context",
          "description": "Analyze the verses immediately following the Muqatta'at in Surahs and return their word frequency counts.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_muqattaat_numerical_values",
          "description": "Perform numerical analysis for Muqatta'at and return a summary string.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "analyze_muqattaat_root_cooccurrence",
          "description": "Analyze the co-occurrence of Muqatta'at with frequent Arabic root words in Surahs and log the structured results.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            },
            {
              "name": "top_n",
              "type": "int",
              "description": "The number of top root words to consider (default is 5)."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "analyze_muqattaat_sequences",
          "description": "Count the frequency of different Muqatta'at sequences in the Quran text and return a dictionary.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_muqattaat_length",
          "description": "Analyze the lengths of Muqatta'at sequences and log detailed distribution and potential secrets.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "categorize_surahs_by_muqattaat",
          "description": "Categorize Surahs as having or not having Muqatta'at and return two lists.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "tuple"
        },
        {
          "name": "analyze_grouped_root_frequencies",
          "description": "Aggregate Arabic root word frequencies for specified Surahs and return a dictionary.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            },
            {
              "name": "surahs",
              "type": "list",
              "description": "List of Surah numbers to analyze."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_grouped_lemma_frequencies",
          "description": "Aggregate lemma frequencies for specified Surahs and return a dictionary.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            },
            {
              "name": "surahs",
              "type": "list",
              "description": "List of Surah numbers to analyze."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "compare_surahs_muqattaat_vs_non_muqattaat",
          "description": "Compare Surahs with and without Muqatta'at in terms of average verse lengths and word frequencies.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_correlations",
          "description": "Analyze correlations across various analytical dimensions and return a list of correlation messages.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            },
            {
              "name": "verse_lengths",
              "type": "dict",
              "description": "Results from verse length analysis."
            },
            {
              "name": "muqattaat_data",
              "type": "dict",
              "description": "Results from Muqatta'at analysis."
            },
            {
              "name": "word_frequency_result",
              "type": "tuple",
              "description": "Summary and flagged words from word frequency analysis."
            },
            {
              "name": "flagged_words",
              "type": "list",
              "description": "List of flagged word messages."
            },
            {
              "name": "verse_repetitions_data",
              "type": "dict",
              "description": "Results of verse repetition analysis."
            },
            {
              "name": "enhanced_symmetry_data",
              "type": "dict",
              "description": "Results from enhanced semantic symmetry analysis."
            },
            {
              "name": "abjad_anomalies",
              "type": "list",
              "description": "Results from Abjad numeral analysis."
            }
          ],
          "return_type": "list"
        },
        {
          "name": "analyze_muqattaat_distribution_meccan_medinan",
          "description": "Analyze the distribution of Muqatta'at across Meccan and Medinan Surahs and return a summary string.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            },
            {
              "name": "surah_classification",
              "type": "dict",
              "description": "Mapping of Surah numbers to their classification ('Meccan' or 'Medinan')."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "analyze_muqattaat_positions",
          "description": "Analyze the positions of Muqatta'at within the Quran text. Returns a summary string (placeholder).",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "generate_muqattaat_report",
          "description": "Generate a comprehensive final report synthesizing all Muqatta'at analyses and log the report.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "review_muqattaat_report",
          "description": "Review the final Muqatta'at report and return final conclusions regarding the Muqatta'at mystery.",
          "parameters": [
            {
              "name": "report_content",
              "type": "str",
              "description": "The content of the final Muqatta'at report."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "synthesize_muqattaat_analyses",
          "description": "Aggregate various Muqatta'at analyses to identify potential correlations and log significant findings.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "compute_tfidf",
          "description": "Compute TF-IDF vectors for a set of documents, returning the vocabulary and TF-IDF representation.",
          "parameters": [
            {
              "name": "docs",
              "type": "dict",
              "description": "Mapping of document identifiers to lists of tokens."
            }
          ],
          "return_type": "tuple"
        },
        {
          "name": "cosine_similarity",
          "description": "Compute cosine similarity between two TF-IDF vectors.",
          "parameters": [
            {
              "name": "vec1",
              "type": "dict",
              "description": "TF-IDF vector for document 1."
            },
            {
              "name": "vec2",
              "type": "dict",
              "description": "TF-IDF vector for document 2."
            },
            {
              "name": "vocab",
              "type": "list",
              "description": "List of unique words across documents."
            }
          ],
          "return_type": "float"
        },
        {
          "name": "analyze_muqattaat_semantic_similarity",
          "description": "Analyze semantic similarity between Surahs sharing the same Muqatta'at sequence and log high similarity findings.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            },
            {
              "name": "muqattaat_mapping",
              "type": "dict",
              "description": "Mapping of Surah numbers to their Muqatta'at sequences."
            }
          ],
          "return_type": "None"
        }
      ],
      "dependencies": [
        "src.logger",
        "src.text_preprocessor"
      ]
    },
    {
      "path": "src/logger.py",
      "language": "python",
      "description": "Module for logging analysis outputs of the Quran Secrets application. Provides functions to log secret findings, results, and bigram frequencies into a log file with timestamps.",
      "classes": [],
      "functions": [
        {
          "name": "log_secret_found",
          "description": "Logs a secret finding to the results.log file with a special tag and a timestamp.",
          "parameters": [
            {
              "name": "message",
              "type": "str",
              "description": "The secret message to log."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "log_result",
          "description": "Logs a result message to the results.log file with a timestamp.",
          "parameters": [
            {
              "name": "message",
              "type": "str",
              "description": "The result message to log."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "log_bigram_frequencies",
          "description": "Logs the top N most frequent bigrams to the results log file including header and frequency counts for the top N bigrams.",
          "parameters": [
            {
              "name": "bigram_frequencies",
              "type": "dict",
              "description": "A dictionary mapping bigram tuples to frequency counts."
            },
            {
              "name": "top_n",
              "type": "int",
              "description": "The number of top bigrams to log (default is 20)."
            }
          ],
          "return_type": "None"
        }
      ],
      "dependencies": []
    },
    {
      "path": "tests/__init__.py",
      "language": "Python",
      "description": "Initialization file for tests directory to mark it as a package and perform any necessary test setup.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "tests/test_file_reader.py",
      "language": "Python",
      "description": "Unit tests for the file_reader module that test reading an existing file and handling errors for non-existing files.",
      "classes": [
        {
          "name": "TestFileReader",
          "description": "Unit test class for testing the file_reader module including tests for reading existing files and error handling when files do not exist.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "test_read_existing_file",
              "description": "Test reading an existing file returns correct content.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_read_non_existing_file",
              "description": "Test that reading a non-existing file raises an IOError.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/file_reader.py"
      ]
    },
    {
      "path": "tests/test_text_preprocessor.py",
      "language": "Python",
      "description": "Unit tests for the text_preprocessor module testing the removal of diacritics and normalization of Arabic letters.",
      "classes": [
        {
          "name": "TestTextPreprocessor",
          "description": "Unit test class for the text_preprocessor module, ensuring proper functionality of diacritics removal and Arabic letter normalization.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "test_remove_diacritics",
              "description": "Test removal of Arabic diacritics from text.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_normalize_arabic_letters",
              "description": "Test normalization of specific Arabic letters in text.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/text_preprocessor.py"
      ]
    },
    {
      "path": "tests/test_analyzer.py",
      "language": "python",
      "description": "Unit tests for the analyzer module covering a wide range of functions and edge cases in the Quran Secrets analysis.",
      "classes": [
        {
          "name": "TestAnalyzer",
          "description": "Test cases for individual functions within the analyzer module.",
          "parents": [],
          "methods": [
            {
              "name": "setUp",
              "description": "Initialize test settings and variables before each test.",
              "parameters": [
                {
                  "name": "self",
                  "type": "object",
                  "description": "Reference to the test instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_non_empty",
              "description": "Test that a non-empty text returns detected anomalies.",
              "parameters": [
                {
                  "name": "self",
                  "type": "object",
                  "description": "Reference to the test instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_empty",
              "description": "Test that an empty text returns no anomalies.",
              "parameters": [
                {
                  "name": "self",
                  "type": "object",
                  "description": "Reference to the test instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_word_frequency_summary",
              "description": "Test that the word frequency analysis returns a proper summary and flagged list.",
              "parameters": [
                {
                  "name": "self",
                  "type": "object",
                  "description": "Reference to the test instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_word_frequency_with_flags",
              "description": "Test that unusual word frequencies are flagged by the word frequency analysis.",
              "parameters": [
                {
                  "name": "self",
                  "type": "object",
                  "description": "Reference to the test instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_root_words_empty",
              "description": "Test the Arabic root word analysis on empty text.",
              "parameters": [
                {
                  "name": "self",
                  "type": "object",
                  "description": "Reference to the test instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_root_words_sample",
              "description": "Test the Arabic root word analysis on sample text with a mocked CAMeL Tools analyzer.",
              "parameters": [
                {
                  "name": "self",
                  "type": "object",
                  "description": "Reference to the test instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_bigrams_empty",
              "description": "Test that analyze_bigrams returns an empty dictionary for empty or insufficient token lists.",
              "parameters": [
                {
                  "name": "self",
                  "type": "object",
                  "description": "Reference to the test instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_bigrams_sample",
              "description": "Test analyze_bigrams generates correct bigrams and counts from a tokenized sample.",
              "parameters": [
                {
                  "name": "self",
                  "type": "object",
                  "description": "Reference to the test instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_palindromes_detects_palindrome",
              "description": "Test that analyze_palindromes correctly detects palindromic words and phrases.",
              "parameters": [
                {
                  "name": "self",
                  "type": "object",
                  "description": "Reference to the test instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_abjad_numerals_detects_patterns",
              "description": "Test that analyze_abjad_numerals detects notable numerical patterns.",
              "parameters": [
                {
                  "name": "self",
                  "type": "object",
                  "description": "Reference to the test instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_semantic_symmetry_detects_symmetry",
              "description": "Test that analyze_semantic_symmetry detects significant semantic overlap.",
              "parameters": [
                {
                  "name": "self",
                  "type": "object",
                  "description": "Reference to the test instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_repetitions",
              "description": "Test that analyze_verse_repetitions identifies repetitions within and across Surahs.",
              "parameters": [
                {
                  "name": "self",
                  "type": "object",
                  "description": "Reference to the test instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_lengths_distribution",
              "description": "Test that analyze_verse_lengths_distribution computes average lengths, standard deviations, and consistency correctly.",
              "parameters": [
                {
                  "name": "self",
                  "type": "object",
                  "description": "Reference to the test instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_length_symmetry_symmetry_detected",
              "description": "Test that analyze_verse_length_symmetry detects symmetry when verse lengths are similar.",
              "parameters": [
                {
                  "name": "self",
                  "type": "object",
                  "description": "Reference to the test instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_length_symmetry_non_symmetric",
              "description": "Test that analyze_verse_length_symmetry returns non-symmetric when verse lengths differ significantly.",
              "parameters": [
                {
                  "name": "self",
                  "type": "object",
                  "description": "Reference to the test instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_enhanced_semantic_symmetry_symmetry_detected",
              "description": "Test that analyze_enhanced_semantic_symmetry detects high semantic similarity when lemma overlap is high.",
              "parameters": [
                {
                  "name": "self",
                  "type": "object",
                  "description": "Reference to the test instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_enhanced_semantic_symmetry_low_symmetry",
              "description": "Test that analyze_enhanced_semantic_symmetry returns a low symmetry score when lemma overlap is minimal.",
              "parameters": [
                {
                  "name": "self",
                  "type": "object",
                  "description": "Reference to the test instance."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_muqattaat_semantic_similarity",
              "description": "Test the analyze_muqattaat_semantic_similarity function with a sample group of Surahs.",
              "parameters": [
                {
                  "name": "self",
                  "type": "object",
                  "description": "Reference to the test instance."
                }
              ],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/analyzer.py"
      ]
    },
    {
      "path": "tests/test_logger.py",
      "language": "Python",
      "description": "This file contains unit tests for the logger module. It tests the functionality of logging secret findings and general results. The tests use unittest framework with mocking to isolate the tests from actual file operations and datetime dependencies.",
      "classes": [
        {
          "name": "TestLogger",
          "description": "A test class that contains test cases for the logger module. It verifies that the logging functions correctly format and write messages to the log file.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "setUp",
              "description": "Initializes the test environment by setting maxDiff to None to see full diff output in case of test failures.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_log_secret_found",
              "description": "Tests that the log_secret_found function correctly formats and writes a message about a potential secret to the log file. It mocks the datetime and file operations to verify the exact output.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestLogger",
                  "description": "Instance of the test class"
                },
                {
                  "name": "mock_datetime",
                  "type": "MagicMock",
                  "description": "Mocked datetime module to provide a fixed timestamp"
                },
                {
                  "name": "mock_file",
                  "type": "MagicMock",
                  "description": "Mocked file open function to capture file writes"
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_log_result",
              "description": "Tests that the log_result function correctly formats and writes a general result message to the log file. It mocks the datetime and file operations to verify the exact output.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestLogger",
                  "description": "Instance of the test class"
                },
                {
                  "name": "mock_datetime",
                  "type": "MagicMock",
                  "description": "Mocked datetime module to provide a fixed timestamp"
                },
                {
                  "name": "mock_file",
                  "type": "MagicMock",
                  "description": "Mocked file open function to capture file writes"
                }
              ],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "unittest",
        "os",
        "unittest.mock",
        "src.logger"
      ]
    },
    {
      "path": "tests/test_main.py",
      "language": "Python",
      "description": "Integration test module for the main functionality of the Quran Secrets application. Contains test cases that verify the end-to-end execution of the application, including tests with and without CAMeL Tools for Arabic language processing, and specific tests for Muqatta'at analysis functionality.",
      "classes": [
        {
          "name": "TestMainIntegration",
          "description": "Test class containing integration tests for the Quran Secrets application, focusing on end-to-end functionality and specific component tests.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "setUp",
              "description": "Initializes test environment by setting maximum difference for test assertions.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_main_integration_fallback",
              "description": "Tests the full execution of the main() function when CAMeL Tools is not available (fallback mode). Creates a minimal Quran text file with sample verses including Muqatta'at sequences, runs the analysis, and verifies all expected log outputs are present, including semantic similarity analysis for Muqatta'at groups.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_main_integration_with_camel_tools",
              "description": "Tests the full execution of the main() function with mocked CAMeL Tools available. Creates a sample Quran text with multiple verses containing the same Muqatta'at sequence, mocks the Arabic morphological analyzer, and verifies all expected analysis outputs are present in the log file.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_compare_surahs_muqattaat_vs_non_muqattaat",
              "description": "Tests the specific function that compares Surahs with and without Muqatta'at, verifying correct categorization of Surahs and statistical analysis of verse lengths and word frequencies.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "os",
        "unittest",
        "unittest.mock",
        "importlib.util",
        "src.main",
        "src.analyzer"
      ]
    },
    {
      "path": "data/quran-uthmani-min.txt",
      "language": "None",
      "description": "Text file containing the Quran text. This file is used as input for the analysis performed by the Quran Secrets application.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "test/test_main.py",
      "language": "Python",
      "description": "Integration tests for the main module executing end-to-end analysis of the Quran Secrets application. Includes tests for fallback scenarios, CAMeL Tools availability, and functionality of comparative analysis functions.",
      "classes": [
        {
          "name": "TestMainIntegration",
          "description": "Test cases for end-to-end integration of the Quran Secrets application.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "setUp",
              "description": "Set maximum diff for assertions and initialize test configurations.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_main_integration_fallback",
              "description": "Test the full execution of main() function end-to-end with CAMeL Tools fallback scenario.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_main_integration_with_camel_tools",
              "description": "Test the full execution of main() function end-to-end with CAMeL Tools available.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_compare_surahs_muqattaat_vs_non_muqattaat",
              "description": "Test compare_surahs_muqattaat_vs_non_muqattaat() for correct categorization and analysis.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "os",
        "unittest",
        "unittest.mock",
        "src.main",
        "importlib.util"
      ]
    },
    {
      "path": "test/analyzer_test.py",
      "language": "Python",
      "description": "Unit tests for the analyzer module. Implements comprehensive tests using the unittest framework to ensure correctness and robustness of analysis functions.",
      "classes": [
        {
          "name": "TestAnalyzer",
          "description": "Unit tests for the analyzer module. Inherits from unittest.TestCase.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "test_analyze_non_empty",
              "description": "Tests that a non-empty text returns a list containing a simulated anomaly.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_empty",
              "description": "Tests that an empty text returns an empty list of anomalies.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_word_frequency_summary",
              "description": "Tests that word frequency analysis returns a proper summary string and a flagged list for sample input.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_word_frequency_with_flags",
              "description": "Tests that word frequency analysis flags words with unusual frequencies in the input text.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_root_words_empty",
              "description": "Tests Arabic root word analysis on empty text ensuring that empty results are returned.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_root_words_sample",
              "description": "Tests Arabic root word analysis on a sample text using a mocked CAMeL Tools analyzer.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_bigrams_empty",
              "description": "Tests that analyze_bigrams returns an empty dictionary for an empty or insufficient token list.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_bigrams_sample",
              "description": "Tests analyze_bigrams with a sample token list to validate correct bigram frequency counts.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_palindromes_detects_palindrome",
              "description": "Tests that palindromic words and phrases are detected correctly in the input text.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_abjad_numerals_detects_patterns",
              "description": "Tests that analyze_abjad_numerals detects notable numerical patterns and logs appropriate messages.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_semantic_symmetry_detects_symmetry",
              "description": "Tests that semantic symmetry analysis detects significant word overlap.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_repetitions",
              "description": "Tests that verse repetition analysis correctly identifies repeated verses within a Surah and across the Quran.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_lengths_distribution",
              "description": "Tests that average verse length and standard deviation are calculated correctly and that consistent surahs are flagged.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_length_symmetry_symmetry_detected",
              "description": "Tests that verse length symmetry analysis detects symmetry when verse lengths are similar.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_length_symmetry_non_symmetric",
              "description": "Tests that verse length symmetry analysis returns non-symmetric when verse lengths differ significantly.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_enhanced_semantic_symmetry_symmetry_detected",
              "description": "Tests that enhanced semantic symmetry analysis detects high lemma overlap and logs a symmetry score.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_enhanced_semantic_symmetry_low_symmetry",
              "description": "Tests that enhanced semantic symmetry analysis returns a low symmetry score when lemma overlap is minimal.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_analyze_muqattaat_semantic_similarity",
              "description": "Tests the semantic similarity analysis function for Muqatta'at by checking for high similarity logging between grouped Surahs.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "unittest",
        "unittest.mock",
        "src.analyzer",
        "src.logger"
      ]
    }
  ]
}