{
  "files": [
    {
      "path": "setup.py",
      "language": "Python",
      "description": "Setup file for Quran Secrets package. Contains configuration details for packaging and installation of the Quran Secrets application.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "requirements.txt",
      "language": "None",
      "description": "List of python package dependencies required by the Quran Secrets application. Contains camel_tools package.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "src/__init__.py",
      "language": "Python",
      "description": "Initialization file for quran_secrets package, used to mark the src directory as a Python package and perform any package-level initializations if required.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "src/main.py",
      "language": "Python",
      "description": "Main driver for the Quran Secrets application that orchestrates reading, preprocessing, and analyzing the Quran text using various analysis functions.",
      "classes": [],
      "functions": [
        {
          "name": "main",
          "description": "Main entry point for the Quran Secrets analysis. It reads a Quran text file, preprocesses the text, performs various analyses, logs results and anomalies, and prints a completion message.",
          "parameters": [],
          "return_type": "None"
        }
      ],
      "dependencies": [
        "src/file_reader.py",
        "src/text_preprocessor.py",
        "src/analyzer.py",
        "src/logger.py"
      ]
    },
    {
      "path": "src/file_reader.py",
      "language": "Python",
      "description": "Module for reading the Quran text from a file. Contains a function to open a file and return its contents, or raise an IOError if the file cannot be read.",
      "classes": [],
      "functions": [
        {
          "name": "read_quran_text",
          "description": "Read and return the text from the specified Quran file. Raises an IOError if the file cannot be read.",
          "parameters": [
            {
              "name": "file_path",
              "type": "str",
              "description": "The path to the Quran text file."
            }
          ],
          "return_type": "str"
        }
      ],
      "dependencies": []
    },
    {
      "path": "src/text_preprocessor.py",
      "language": "Python",
      "description": "This module provides functionality for preprocessing and normalizing Arabic text. It includes functions to remove diacritics and normalize specific Arabic letters according to certain rules. The module is designed to standardize Arabic text for further processing in NLP or text analysis applications.",
      "classes": [],
      "functions": [
        {
          "name": "remove_diacritics",
          "description": "Removes all Arabic diacritical marks (tashkeel) from the input text. These marks include fatha, kasra, damma, sukun, shadda, and other vowel marks that appear above or below letters in Arabic script. The function uses regular expressions to identify and remove these marks.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The original Arabic text containing diacritics that need to be removed."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "normalize_arabic_letters",
          "description": "Normalizes specific Arabic letters in the given text according to contextual rules. It specifically handles two cases: 1) Converting the Arabic letter 'ى' (alef maqsura, U+0649) to 'ي' (yeh, U+064A) only when it appears as a standalone word, and 2) Converting the Arabic letter 'ة' (teh marbuta, U+0629) to 'ه' (heh, U+0647) when it appears at the end of words. This normalization helps standardize text variations that are semantically equivalent in Arabic.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The Arabic text to be normalized."
            }
          ],
          "return_type": "str"
        }
      ],
      "dependencies": [
        "re"
      ]
    },
    {
      "path": "src/analyzer.py",
      "language": "Python",
      "description": "This module provides a comprehensive set of functions to analyze the Quran text for hidden patterns and anomalies. It includes functionalities for text analysis, word frequency, Arabic root word analysis (using CAMeL Tools if available), bigram analysis, verse repetition detection, lemma analysis, surah verse count analysis, verse length distribution analysis, palindrome detection, Abjad numeral analysis, semantic symmetry, and enhanced semantic symmetry analysis.",
      "classes": [],
      "functions": [
        {
          "name": "analyze_text",
          "description": "Analyzes the given Quran text for hidden numerical patterns and anomalies. Returns a list of detected anomaly messages.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed text of the Quran."
            }
          ],
          "return_type": "list"
        },
        {
          "name": "analyze_word_frequency",
          "description": "Performs word frequency analysis on the preprocessed Quran text. Returns a tuple containing a summary string and a list of flagged messages for unusual word frequencies.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "tuple"
        },
        {
          "name": "analyze_root_words",
          "description": "Performs Arabic root word analysis on the preprocessed Quran text using an optional CAMeL Tools analyzer. Returns a tuple containing a summary, a dictionary of root frequencies, and a list of top root words.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "tuple"
        },
        {
          "name": "analyze_bigrams",
          "description": "Performs bigram frequency analysis on a list of tokenized words with an optional n-gram size. Returns a dictionary with n-gram tuples as keys and their frequency counts as values.",
          "parameters": [
            {
              "name": "tokenized_text",
              "type": "list",
              "description": "A list of preprocessed tokens from the Quran text."
            },
            {
              "name": "n",
              "type": "int",
              "description": "The number of words in each n-gram (default is 2)."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_verse_repetitions",
          "description": "Analyzes verse repetitions within each Surah and across the entire Quran. Returns a dictionary with analysis results of intra-surah and across Quran verse repetitions.",
          "parameters": [
            {
              "name": "preprocessed_text",
              "type": "str",
              "description": "The preprocessed Quran text data."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_lemmas",
          "description": "Performs lemma analysis on the tokenized Quran text using CAMeL Tools analyzer if available. Returns a formatted summary of the lemma frequency analysis.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "analyze_surah_verse_counts",
          "description": "Analyzes the count of verses per Surah in the Quran text. Returns a formatted summary of verse counts per Surah.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The Quran text loaded from the data file."
            }
          ],
          "return_type": "str"
        },
        {
          "name": "analyze_verse_lengths_distribution",
          "description": "Analyzes verse lengths distribution for each Surah in the Quran text. Returns a dictionary mapping Surah numbers to average verse length, standard deviation, and a consistency flag.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text with each line representing a verse."
            },
            {
              "name": "threshold",
              "type": "float",
              "description": "Standard deviation threshold to consider verse lengths as consistent (default is 2)."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_palindromes",
          "description": "Analyzes palindromic structures within each verse of the Quran. Returns a list of tuples containing Surah, Ayah, and the palindrome detected.",
          "parameters": [
            {
              "name": "quran_text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "list"
        },
        {
          "name": "analyze_abjad_numerals",
          "description": "Performs Abjad numeral analysis on each verse of the Quran text and logs verses with notable numerical patterns. Returns a list of tuples with detected numerical patterns.",
          "parameters": [
            {
              "name": "quran_text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "list"
        },
        {
          "name": "analyze_semantic_symmetry",
          "description": "Analyzes semantic symmetry by measuring word overlap between two halves of each Surah. Returns a list of tuples with analysis results for each Surah.",
          "parameters": [
            {
              "name": "quran_text",
              "type": "str",
              "description": "The preprocessed Quran text."
            }
          ],
          "return_type": "list"
        },
        {
          "name": "analyze_verse_length_symmetry",
          "description": "Analyzes verse length symmetry between two halves of each Surah. Returns a dictionary mapping Surah numbers to symmetry metrics including average, stddev, and a symmetry flag.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text with each line representing a verse."
            },
            {
              "name": "avg_threshold",
              "type": "float",
              "description": "Maximum allowed difference in average verse length between halves."
            },
            {
              "name": "stddev_threshold",
              "type": "float",
              "description": "Maximum allowed difference in verse length standard deviation between halves."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_enhanced_semantic_symmetry",
          "description": "Performs enhanced semantic symmetry analysis using lemma overlap between two halves of each Surah. Returns a dictionary mapping Surah numbers to symmetry scores and lemma sets.",
          "parameters": [
            {
              "name": "text",
              "type": "str",
              "description": "The preprocessed Quran text with each line representing a verse."
            },
            {
              "name": "symmetry_threshold",
              "type": "float",
              "description": "Minimum normalized overlap required to consider semantic symmetry."
            }
          ],
          "return_type": "dict"
        }
      ],
      "dependencies": [
        "src.logger",
        "src.text_preprocessor"
      ]
    },
    {
      "path": "src/logger.py",
      "language": "python",
      "description": "Module for logging analysis outputs of the Quran Secrets application. Provides functions to log secret findings, results, and bigram frequencies into a log file with timestamps.",
      "classes": [],
      "functions": [
        {
          "name": "log_secret_found",
          "description": "Logs a secret finding to the results.log file with a special tag and a timestamp.",
          "parameters": [
            {
              "name": "message",
              "type": "str",
              "description": "The secret message to log."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "log_result",
          "description": "Logs a result message to the results.log file with a timestamp.",
          "parameters": [
            {
              "name": "message",
              "type": "str",
              "description": "The result message to log."
            }
          ],
          "return_type": "None"
        },
        {
          "name": "log_bigram_frequencies",
          "description": "Logs the top N most frequent bigrams to the results log file including header and frequency counts for the top N bigrams.",
          "parameters": [
            {
              "name": "bigram_frequencies",
              "type": "dict",
              "description": "A dictionary mapping bigram tuples to frequency counts."
            },
            {
              "name": "top_n",
              "type": "int",
              "description": "The number of top bigrams to log (default is 20)."
            }
          ],
          "return_type": "None"
        }
      ],
      "dependencies": []
    },
    {
      "path": "tests/__init__.py",
      "language": "Python",
      "description": "Initialization file for tests directory to mark it as a package and perform any necessary test setup.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "tests/test_file_reader.py",
      "language": "Python",
      "description": "Unit tests for the file_reader module that test reading an existing file and handling errors for non-existing files.",
      "classes": [
        {
          "name": "TestFileReader",
          "description": "Unit test class for testing the file_reader module including tests for reading existing files and error handling when files do not exist.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "test_read_existing_file",
              "description": "Test reading an existing file returns correct content.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_read_non_existing_file",
              "description": "Test that reading a non-existing file raises an IOError.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/file_reader.py"
      ]
    },
    {
      "path": "tests/test_text_preprocessor.py",
      "language": "Python",
      "description": "Unit tests for the text_preprocessor module testing the removal of diacritics and normalization of Arabic letters.",
      "classes": [
        {
          "name": "TestTextPreprocessor",
          "description": "Unit test class for the text_preprocessor module, ensuring proper functionality of diacritics removal and Arabic letter normalization.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "test_remove_diacritics",
              "description": "Test removal of Arabic diacritics from text.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_normalize_arabic_letters",
              "description": "Test normalization of specific Arabic letters in text.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/text_preprocessor.py"
      ]
    },
    {
      "path": "tests/test_analyzer.py",
      "language": "Python",
      "description": "Unit tests for the analyzer module. This file contains the TestAnalyzer class that implements various unit tests for the functions in src.analyzer.",
      "classes": [
        {
          "name": "TestAnalyzer",
          "description": "A unittest.TestCase class containing unit tests for various functions in the src.analyzer module.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "setUp",
              "description": "Setup test environment before each test.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "Instance of TestAnalyzer."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_non_empty",
              "description": "Test that a non-empty text returns a simulated anomaly.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "Instance of TestAnalyzer."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_empty",
              "description": "Test that an empty text returns no anomalies.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "Instance of TestAnalyzer."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_word_frequency_summary",
              "description": "Test that the word frequency analysis returns a proper summary and flagged list.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "Instance of TestAnalyzer."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_word_frequency_with_flags",
              "description": "Test that the word frequency analysis flags unusual word frequencies.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "Instance of TestAnalyzer."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_root_words_empty",
              "description": "Test Arabic root word analysis on empty text.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "Instance of TestAnalyzer."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_root_words_sample",
              "description": "Test Arabic root word analysis on sample text with mocked CAMeL Tools analyzer.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "Instance of TestAnalyzer."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_bigrams_empty",
              "description": "Test that analyze_bigrams returns an empty dictionary when provided an empty tokenized text or insufficient tokens.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "Instance of TestAnalyzer."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_bigrams_sample",
              "description": "Test analyze_bigrams with a sample tokenized text for correct bigram generation and frequency counting.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "Instance of TestAnalyzer."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_palindromes_detects_palindrome",
              "description": "Test that analyze_palindromes detects palindromic words and phrases.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "Instance of TestAnalyzer."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_abjad_numerals_detects_patterns",
              "description": "Test that analyze_abjad_numerals detects notable numerical patterns.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "Instance of TestAnalyzer."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_semantic_symmetry_detects_symmetry",
              "description": "Test that analyze_semantic_symmetry detects significant word overlap.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "Instance of TestAnalyzer."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_repetitions",
              "description": "Test that analyze_verse_repetitions correctly identifies repetitions both intra-surah and across the Quran.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "Instance of TestAnalyzer."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_lengths_distribution",
              "description": "Test that analyze_verse_lengths_distribution correctly calculates average verse length, standard deviation, and identifies consistent surahs.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "Instance of TestAnalyzer."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_length_symmetry_symmetry_detected",
              "description": "Test that analyze_verse_length_symmetry detects symmetry when halves have similar verse lengths.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "Instance of TestAnalyzer."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_verse_length_symmetry_non_symmetric",
              "description": "Test that analyze_verse_length_symmetry returns non-symmetric when verse lengths differ significantly.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "Instance of TestAnalyzer."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_enhanced_semantic_symmetry_symmetry_detected",
              "description": "Test that analyze_enhanced_semantic_symmetry detects semantic symmetry when lemma overlap is high.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "Instance of TestAnalyzer."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_enhanced_semantic_symmetry_low_symmetry",
              "description": "Test that analyze_enhanced_semantic_symmetry returns low symmetry score when lemma overlap is minimal.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestAnalyzer",
                  "description": "Instance of TestAnalyzer."
                }
              ],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src.analyzer",
        "src.logger",
        "unittest",
        "unittest.mock"
      ]
    },
    {
      "path": "tests/test_logger.py",
      "language": "Python",
      "description": "This file contains unit tests for the logger module. It tests the functionality of logging secret findings and general results. The tests use unittest framework with mocking to isolate the tests from actual file operations and datetime dependencies.",
      "classes": [
        {
          "name": "TestLogger",
          "description": "A test class that contains test cases for the logger module. It verifies that the logging functions correctly format and write messages to the log file.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "setUp",
              "description": "Initializes the test environment by setting maxDiff to None to see full diff output in case of test failures.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_log_secret_found",
              "description": "Tests that the log_secret_found function correctly formats and writes a message about a potential secret to the log file. It mocks the datetime and file operations to verify the exact output.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestLogger",
                  "description": "Instance of the test class"
                },
                {
                  "name": "mock_datetime",
                  "type": "MagicMock",
                  "description": "Mocked datetime module to provide a fixed timestamp"
                },
                {
                  "name": "mock_file",
                  "type": "MagicMock",
                  "description": "Mocked file open function to capture file writes"
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_log_result",
              "description": "Tests that the log_result function correctly formats and writes a general result message to the log file. It mocks the datetime and file operations to verify the exact output.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestLogger",
                  "description": "Instance of the test class"
                },
                {
                  "name": "mock_datetime",
                  "type": "MagicMock",
                  "description": "Mocked datetime module to provide a fixed timestamp"
                },
                {
                  "name": "mock_file",
                  "type": "MagicMock",
                  "description": "Mocked file open function to capture file writes"
                }
              ],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "unittest",
        "os",
        "unittest.mock",
        "src.logger"
      ]
    },
    {
      "path": "tests/test_main.py",
      "language": "Python",
      "description": "Integration tests for the main module to execute end-to-end analysis scenarios using mocked dependencies and simulated file inputs.",
      "classes": [
        {
          "name": "TestMainIntegration",
          "description": "Integration tests for the main module ensuring end-to-end analysis works with various configurations.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "setUp",
              "description": "Setup method for initializing test configurations and environment.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_main_integration_fallback",
              "description": "Tests the full execution of main() with CAMeL Tools fallback scenario and verifies log outputs.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_main_integration_with_camel_tools",
              "description": "Tests the full execution of main() with CAMeL Tools available, verifying behavior with mocked analyzers.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/main.py",
        "os",
        "unittest",
        "unittest.mock",
        "importlib.util"
      ]
    },
    {
      "path": "data/quran-uthmani-min.txt",
      "language": "None",
      "description": "Text file containing the Quran text. This file is used as input for the analysis performed by the Quran Secrets application.",
      "classes": [],
      "functions": [],
      "dependencies": []
    }
  ]
}