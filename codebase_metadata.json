{
  "files": [
    {
      "path": "src/__init__.py",
      "language": "python",
      "description": "Initialization script for the src package that enables package-level imports and configurations.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "src/data_loader.py",
      "language": "Python",
      "description": "This file contains the QuranDataLoader class responsible for loading Quran verse data from a text file. It handles parsing lines in the format 'surah|ayah|verse_text' and converts them into a structured list of dictionaries. The class includes error handling for file not found scenarios and proper logging.",
      "classes": [
        {
          "name": "QuranDataLoader",
          "description": "A class that loads and parses Quran data from a text file. Each line in the file is expected to be in the format 'surah|ayah|verse_text'. The class provides functionality to read this data and convert it into a structured format for further processing.",
          "parents": [],
          "methods": [
            {
              "name": "__init__",
              "description": "Initializes the QuranDataLoader with an optional file path and sets up logging.",
              "parameters": [
                {
                  "name": "self",
                  "type": "QuranDataLoader",
                  "description": "Instance of the class"
                },
                {
                  "name": "file_path",
                  "type": "str",
                  "description": "Path to the data file. If None, returns empty data."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "load_data",
              "description": "Loads data from the specified file, parsing each line into a dictionary with 'surah', 'ayah', and 'verse_text' keys. Raises FileNotFoundError if the file path is not provided or the file does not exist.",
              "parameters": [
                {
                  "name": "self",
                  "type": "QuranDataLoader",
                  "description": "Instance of the class"
                }
              ],
              "return_type": "list"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "os",
        "logging"
      ]
    },
    {
      "path": "src/text_preprocessor.py",
      "language": "python",
      "description": "Module defining the TextPreprocessor class which processes Arabic text. It performs normalization, tokenization, lemmatization, and root extraction, while logging each step for debugging and verification.",
      "classes": [
        {
          "name": "TextPreprocessor",
          "description": "A class for preprocessing Arabic text by normalizing, tokenizing, lemmatizing, and extracting root words. It logs various processing steps for debugging.",
          "parents": [],
          "methods": [
            {
              "name": "__init__",
              "description": "Initialize the TextPreprocessor and configure the logger.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "preprocess_text",
              "description": "Preprocess the Arabic text by performing normalization, tokenization, lemmatization, and root extraction. Returns the processed tokens joined by a space.",
              "parameters": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "The input Arabic text."
                }
              ],
              "return_type": "string"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/arabic_normalization.py",
        "src/tokenizer.py",
        "src/lemmatizer.py",
        "src/root_extractor.py"
      ]
    },
    {
      "path": "src/logger_config.py",
      "language": "python",
      "description": "Configures and returns a logger for the application, logging messages to both console and a log file named 'quran_analysis.log'.",
      "classes": [],
      "functions": [
        {
          "name": "configure_logger",
          "description": "Configures and returns a logger that logs messages to both console and a log file.\n\nThe log file is named 'quran_analysis.log' and is located in the project root.\n\n:return: Configured logger instance.",
          "parameters": [],
          "return_type": "logger"
        }
      ],
      "dependencies": [
        "logging",
        "os"
      ]
    },
    {
      "path": "src/main.py",
      "language": "Python",
      "description": "Main entry point for the Quran text analysis application. Orchestrates the entire workflow including data loading, text preprocessing, and various text analysis techniques. The file handles loading Quran data, preprocessing each verse, and performing multiple types of analyses including word frequency, character frequency, n-gram analysis, co-occurrence analysis, and collocation analysis at different levels (Quran-wide, Surah-level, and Ayah-level).",
      "classes": [],
      "functions": [
        {
          "name": "main",
          "description": "Main function that orchestrates the entire Quran text analysis workflow. It loads Quran data, preprocesses text, and performs various analyses including word frequency, character frequency, n-gram, co-occurrence, and collocation analyses at different levels (Quran-wide, Surah-level, and Ayah-level). The function handles exceptions and ensures proper logging throughout the execution process.",
          "parameters": [],
          "return_type": "None"
        }
      ],
      "dependencies": [
        "logging",
        "os",
        "src.logger_config",
        "src.data_loader",
        "src.text_preprocessor",
        "src.frequency_analyzer",
        "src.cooccurrence_analyzer",
        "src.collocation_analyzer",
        "src.ngram_analyzer"
      ]
    },
    {
      "path": "setup.py",
      "language": "python",
      "description": "Setup script for the QuranAnalysis package. Configures package metadata, dependencies, and entry points for console scripts using setuptools.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "requirements.txt",
      "language": "None",
      "description": "Requirements file listing the project's dependencies, including the camel-tools package required for Arabic text processing.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "data/quran-uthmani-min.txt",
      "language": "None",
      "description": "Data file containing the Quran text in a simple format with surah|ayah|verse text.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "tests/__init__.py",
      "language": "python",
      "description": "Initialization script for the tests package that enables discovery and execution of test cases.",
      "classes": [],
      "functions": [],
      "dependencies": []
    },
    {
      "path": "tests/test_data_loader.py",
      "language": "Python",
      "description": "This file contains unit tests for the QuranDataLoader class. It tests the functionality of loading data from a file, including error handling for file not found scenarios. The tests use a temporary file with test data to verify that the loader correctly parses the file and returns the expected data structure.",
      "classes": [
        {
          "name": "TestQuranDataLoader",
          "description": "A test class for the QuranDataLoader that verifies its functionality for loading and parsing Quran data from a text file. It includes tests for both successful data loading and error handling when a file is not found.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "setUp",
              "description": "Sets up the test environment by creating a temporary file with test data.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestQuranDataLoader",
                  "description": "Instance of the test class"
                }
              ],
              "return_type": "None"
            },
            {
              "name": "tearDown",
              "description": "Cleans up the test environment by removing the temporary file.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestQuranDataLoader",
                  "description": "Instance of the test class"
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_load_data_file_not_found",
              "description": "Tests that load_data raises FileNotFoundError when the file doesn't exist.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestQuranDataLoader",
                  "description": "Instance of the test class"
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_load_data_success",
              "description": "Tests that load_data correctly parses the file and returns the expected data structure.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestQuranDataLoader",
                  "description": "Instance of the test class"
                }
              ],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "unittest",
        "os",
        "tempfile",
        "unittest.mock",
        "src.data_loader"
      ]
    },
    {
      "path": "tests/test_text_preprocessor.py",
      "language": "python",
      "description": "This file contains unit tests for the text preprocessing components including the TextPreprocessor class, the normalize_text function, and the tokenize_text function. It verifies that diacritics are removed, texts are properly normalized, and tokenization is executed correctly.",
      "classes": [
        {
          "name": "TestTextPreprocessor",
          "description": "Unit tests for text preprocessing functionalities. Tests cover normalization of Arabic text and proper splitting of text tokens.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "test_preprocess_text_removes_diacritics_and_normalizes",
              "description": "Tests that the TextPreprocessor correctly removes diacritics and normalizes Arabic letters in the input text.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_preprocess_text_no_modification",
              "description": "Tests that the TextPreprocessor leaves already normalized text unchanged.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_arabic_normalization_removes_invisible_and_normalizes",
              "description": "Tests that the normalize_text function removes invisible characters and diacritics while normalizing Arabic letters according to the mapping rules.",
              "parameters": [],
              "return_type": "None"
            },
            {
              "name": "test_tokenizer_splits_on_punctuation_and_whitespace",
              "description": "Tests that the tokenize_text function correctly splits input text into tokens based on punctuation and whitespace.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/text_preprocessor.py",
        "src/arabic_normalization.py",
        "src/tokenizer.py"
      ]
    },
    {
      "path": "tests/test_logger_config.py",
      "language": "python",
      "description": "Unit tests for the logger configuration ensuring the logger is set up with a FileHandler for the log file.",
      "classes": [
        {
          "name": "TestLoggerConfig",
          "description": "Unit tests for testing logger configuration via the configure_logger function.",
          "parents": [],
          "methods": [
            {
              "name": "test_configure_logger_creates_log_file",
              "description": "Test that the logger is configured with a FileHandler pointing to 'quran_analysis.log'.",
              "parameters": [],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/logger_config.py"
      ]
    },
    {
      "path": "tests/test_integration.py",
      "language": "Python",
      "description": "Integration tests for the core user flow and analysis functions. Uses the unittest framework to verify application logging, data processing, and analysis results.",
      "classes": [
        {
          "name": "TestIntegration",
          "description": "Integration test suite for verifying end-to-end functionality of the application including data loading, analysis, and logging.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "test_integration_flow",
              "description": "Tests the complete integration flow of the application, verifying log outputs and ensuring that analysis functions produce expected results.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestIntegration",
                  "description": "Instance of TestIntegration"
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_semantic_group_frequency",
              "description": "Tests the semantic group frequency analysis function by providing sample Quran data and verifying that the logged output contains expected values.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestIntegration",
                  "description": "Instance of TestIntegration"
                }
              ],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/main.py",
        "src/frequency_analyzer.py"
      ]
    },
    {
      "path": "src/arabic_normalization.py",
      "language": "python",
      "description": "This file implements a function 'normalize_text' that performs comprehensive Arabic text normalization. It removes invisible Unicode characters, strips Arabic diacritics, and maps various Arabic letter forms to their standard forms. Special handling is provided to convert taa marbuta to ha when it follows a ya.",
      "classes": [],
      "functions": [
        {
          "name": "normalize_text",
          "description": "Normalizes Arabic text by removing invisible Unicode characters and diacritics, applying a mapping to standardize Arabic letters, and converting taa marbuta to ha when preceded by ya. The function uses regular expressions for pattern matching and substitution.",
          "parameters": [
            {
              "name": "text",
              "type": "string",
              "description": "The input Arabic text that needs normalization."
            }
          ],
          "return_type": "string"
        }
      ],
      "dependencies": []
    },
    {
      "path": "src/tokenizer.py",
      "language": "python",
      "description": "Module to tokenize Arabic text into individual word tokens using whitespace and punctuation as delimiters.",
      "classes": [],
      "functions": [
        {
          "name": "tokenize_text",
          "description": "Tokenize the normalized Arabic text into a list of word tokens based on whitespace and punctuation.",
          "parameters": [
            {
              "name": "text",
              "type": "string",
              "description": "The input normalized Arabic text to be tokenized."
            }
          ],
          "return_type": "list"
        }
      ],
      "dependencies": []
    },
    {
      "path": "src/lemmatizer.py",
      "language": "python",
      "description": "Module for Arabic lemmatization. Provides functionality to lemmatize Arabic tokens using CAMeL Tools.",
      "classes": [],
      "functions": [
        {
          "name": "lemmatize_token",
          "description": "Lemmatize the given Arabic token using CAMeL Tools. Returns the lemmatized form if successful; otherwise returns the original token.",
          "parameters": [
            {
              "name": "token",
              "type": "string",
              "description": "The Arabic word token."
            }
          ],
          "return_type": "string"
        }
      ],
      "dependencies": []
    },
    {
      "path": "src/root_extractor.py",
      "language": "python",
      "description": "Module for Arabic root word extraction. Provides functionality to extract the root of an Arabic token using CAMeL Tools morphological analysis.",
      "classes": [],
      "functions": [
        {
          "name": "extract_root",
          "description": "Extract the root of the given Arabic token using CAMeL Tools morphological analysis. Returns the root if found; otherwise returns the original token.",
          "parameters": [
            {
              "name": "token",
              "type": "string",
              "description": "The Arabic word token."
            }
          ],
          "return_type": "string"
        }
      ],
      "dependencies": []
    },
    {
      "path": "tests/test_lemmatizer.py",
      "language": "Python",
      "description": "Unit tests for the Arabic lemmatizer function. Uses unittest and mock patching to validate the behavior of lemmatize_token by simulating the lemmatizer instance.",
      "classes": [
        {
          "name": "TestLemmatizer",
          "description": "Contains unit tests for the Arabic lemmatizer. Tests the lemmatize_token function to ensure it appends '_lem' to a given token using a mocked lemmatizer instance.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "test_lemmatize_token",
              "description": "Tests that lemmatize_token returns the token appended with '_lem' using a mocked lemmatizer instance.",
              "parameters": [
                {
                  "name": "mock_lemmatizer_instance",
                  "type": "Mock",
                  "description": "A mocked instance of the internal lemmatizer to simulate the lemmatization behavior."
                }
              ],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/lemmatizer"
      ]
    },
    {
      "path": "tests/test_root_extractor.py",
      "language": "Python",
      "description": "Unit tests for the Arabic root extraction functionality. Validates the behavior of extract_root function with both valid analysis and fallback when analysis returns an empty result.",
      "classes": [
        {
          "name": "TestRootExtractor",
          "description": "Contains unit tests for Arabic root extraction, testing both cases when a valid root is returned and when no analysis result is provided.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "test_extract_root",
              "description": "Tests that extract_root returns the correct root when the analyzer returns a valid result.",
              "parameters": [
                {
                  "name": "mock_analyzer_instance",
                  "type": "Mock",
                  "description": "A mocked analyzer instance to simulate analysis returning a valid root."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_extract_root_no_analysis",
              "description": "Tests that extract_root returns the original token when the analyzer returns an empty result.",
              "parameters": [
                {
                  "name": "mock_analyzer_instance",
                  "type": "Mock",
                  "description": "A mocked analyzer instance to simulate analysis returning an empty list."
                }
              ],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/root_extractor"
      ]
    },
    {
      "path": "src/frequency_analyzer.py",
      "language": "Python",
      "description": "Module for analyzing frequencies in Quran text including word, character, root, lemma, and semantic group analysis. Provides multiple functions to compute frequency statistics.",
      "classes": [],
      "functions": [
        {
          "name": "count_word_frequencies",
          "description": "Counts the frequency of each word in the tokenized text and returns a dictionary mapping words to their frequency count.",
          "parameters": [
            {
              "name": "tokenized_text",
              "type": "list",
              "description": "A list of lists, where each inner list contains tokenized words."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_word_length_distribution",
          "description": "Analyzes the distribution of word lengths in the tokenized text, logging statistics like total words, average length, and most frequent lengths.",
          "parameters": [
            {
              "name": "tokenized_text",
              "type": "list",
              "description": "A list of lists containing tokenized words from the Quran text."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_surah_word_frequency",
          "description": "Analyzes word frequencies at the Surah level and logs the top 10 most frequent words per Surah.",
          "parameters": [
            {
              "name": "data",
              "type": "list",
              "description": "List of dictionaries containing Quran data for Surah-level analysis."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_ayah_word_frequency",
          "description": "Analyzes word frequencies at the Ayah level and logs the top 5 most frequent words per Ayah.",
          "parameters": [
            {
              "name": "data",
              "type": "list",
              "description": "List of dictionaries containing Quran data for Ayah-level analysis."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_root_word_frequency",
          "description": "Analyzes the frequency of root words across the Quran data, logging statistics and returning a Counter of root words.",
          "parameters": [
            {
              "name": "data",
              "type": "list",
              "description": "List of dictionaries containing Quran data with a 'roots' key."
            }
          ],
          "return_type": "Counter"
        },
        {
          "name": "analyze_lemma_word_frequency",
          "description": "Analyzes the frequency of lemma words across the Quran data, logging statistics and returning a Counter of lemma words.",
          "parameters": [
            {
              "name": "data",
              "type": "list",
              "description": "List of dictionaries containing Quran data with a 'lemmas' key."
            }
          ],
          "return_type": "Counter"
        },
        {
          "name": "analyze_surah_root_word_frequency",
          "description": "Analyzes the frequency of root words at the Surah level by preprocessing verse text and counting root word occurrences.",
          "parameters": [
            {
              "name": "data",
              "type": "list",
              "description": "List of dictionaries containing Quran data for Surah-level root word analysis."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_ayah_root_word_frequency",
          "description": "Analyzes the frequency of root words at the Ayah level, returning a dictionary mapping Ayah identifiers to their root word frequency counts.",
          "parameters": [
            {
              "name": "data",
              "type": "list",
              "description": "List of dictionaries containing Quran data for Ayah-level root word analysis."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_ayah_first_root_word_frequency",
          "description": "Analyzes the frequency of the first root word in each Ayah and returns a Counter of first root words.",
          "parameters": [
            {
              "name": "data",
              "type": "list",
              "description": "List of dictionaries containing Quran data for first root word analysis."
            }
          ],
          "return_type": "Counter"
        },
        {
          "name": "analyze_ayah_last_root_word_frequency",
          "description": "Analyzes the frequency of the last root word in each Ayah and returns a Counter of last root words.",
          "parameters": [
            {
              "name": "data",
              "type": "list",
              "description": "List of dictionaries containing Quran data for last root word analysis."
            }
          ],
          "return_type": "Counter"
        },
        {
          "name": "analyze_semantic_group_frequency",
          "description": "Analyzes the frequency of semantic groups based on root words in the Quran data and logs the top 20 groups.",
          "parameters": [
            {
              "name": "quran_data",
              "type": "list",
              "description": "List of dictionaries representing Quran data for semantic group analysis."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_character_frequency",
          "description": "Analyzes the frequency of each character in the tokenized Quran text and logs the top 20 most frequent characters.",
          "parameters": [
            {
              "name": "tokenized_text",
              "type": "list",
              "description": "List of tokenized verses, where each verse is a list of words."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_surah_character_frequency",
          "description": "Analyzes character frequency at the Surah level by concatenating verses and counting character occurrences.",
          "parameters": [
            {
              "name": "data",
              "type": "list",
              "description": "List of dictionaries representing Quran data for Surah-level character analysis."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_ayah_character_frequency",
          "description": "Analyzes character frequency at the Ayah level and returns a dictionary mapping Ayah identifiers to character frequencies.",
          "parameters": [
            {
              "name": "data",
              "type": "list",
              "description": "List of dictionaries representing Quran data for Ayah-level character analysis."
            }
          ],
          "return_type": "dict"
        }
      ],
      "dependencies": [
        "src/text_preprocessor.py",
        "src/tokenizer.py",
        "src/root_extractor.py"
      ]
    },
    {
      "path": "src/cooccurrence_analyzer.py",
      "language": "python",
      "description": "This module provides functionality to analyze word co-occurrence within each ayah of the Quran data. It tokenizes the text and counts unique co-occurring word pairs, logging the top N pairs and the total number of unique pairs.",
      "classes": [],
      "functions": [
        {
          "name": "analyze_word_cooccurrence",
          "description": "Analyzes word co-occurrence within each ayah of the Quran data. It tokenizes the verse text and counts unique word pairs, ensuring pairs are stored in alphabetical order for consistency.",
          "parameters": [
            {
              "name": "quran_data",
              "type": "list",
              "description": "List of dictionaries, each containing 'surah', 'ayah', and either 'processed_text' or 'verse_text'."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_root_word_cooccurrence",
          "description": "Analyzes Root word co-occurrence within each ayah of the Quran data. It tokenizes the verse text and counts unique root word pairs, ensuring pairs are stored in alphabetical order for consistency.",
          "parameters": [
            {
              "name": "quran_data",
              "type": "list",
              "description": "List of dictionaries, each containing 'surah', 'ayah', and either 'processed_text' or 'verse_text'."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_lemma_word_cooccurrence",
          "description": "Analyzes Lemma word co-occurrence within each ayah of the Quran data. It tokenizes the verse text and counts unique lemma word pairs, ensuring pairs are stored in alphabetical order for consistency.",
          "parameters": [
            {
              "name": "quran_data",
              "type": "list",
              "description": "List of dictionaries, each containing 'surah', 'ayah', and either 'processed_text' or 'verse_text'."
            }
          ],
          "return_type": "dict"
        }
      ],
      "dependencies": [
        "src/tokenizer.py"
      ]
    },
    {
      "path": "src/ngram_analyzer.py",
      "language": "python",
      "description": "Provides a collection of functions for performing n-gram analysis on Quran data at both the word and character levels. This module supports analysis on the entire text as well as segmented analyses at the Surah and Ayah levels, logging detailed frequency counts and top n-grams.",
      "classes": [],
      "functions": [
        {
          "name": "analyze_word_ngrams",
          "description": "Analyzes word n-gram frequency by tokenizing ayahs and counting consecutive word sequences using a sliding window. Logs the top 20 most frequent n-grams and returns a Counter object.",
          "parameters": [
            {
              "name": "quran_data",
              "type": "list",
              "description": "List of ayahs, where each ayah is either a pre-tokenized list or a string that requires splitting."
            },
            {
              "name": "n",
              "type": "int",
              "description": "The size of the n-gram to generate, default is 2."
            }
          ],
          "return_type": "Counter"
        },
        {
          "name": "analyze_surah_word_ngrams",
          "description": "Analyzes word n-gram frequency at the Surah level by grouping ayahs per Surah, tokenizing text, and counting n-grams using a sliding window approach. Logs the top 20 n-grams and unique n-gram counts for each Surah.",
          "parameters": [
            {
              "name": "data",
              "type": "list",
              "description": "List of dictionaries representing Quran data for each ayah."
            },
            {
              "name": "n",
              "type": "int",
              "description": "The n-gram size, default is 2."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_ayah_word_ngrams",
          "description": "Analyzes word n-gram frequency at the Ayah level by tokenizing each ayah's text and counting consecutive word groups. Logs the top 20 n-grams along with the total unique n-grams for each Ayah.",
          "parameters": [
            {
              "name": "data",
              "type": "list",
              "description": "List of dictionaries representing Quran data with ayah details."
            },
            {
              "name": "n",
              "type": "int",
              "description": "The n-gram size, default is 2."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_character_ngrams",
          "description": "Analyzes character n-gram frequency over the entire Quran text by concatenating ayahs and sliding a window across characters. Logs the top 10 most frequent n-grams and returns a Counter object.",
          "parameters": [
            {
              "name": "quran_data",
              "type": "list",
              "description": "List of dictionaries representing Quran data with text content."
            },
            {
              "name": "n",
              "type": "int",
              "description": "The length of the n-gram, default is 2."
            }
          ],
          "return_type": "Counter"
        },
        {
          "name": "analyze_surah_character_ngrams",
          "description": "Analyzes character n-gram frequency at the Surah level by aggregating text per Surah and counting n-grams using a sliding window. Logs the top 5 n-grams and total unique n-gram counts for each Surah.",
          "parameters": [
            {
              "name": "quran_data",
              "type": "list",
              "description": "List of dictionaries representing Quran data."
            },
            {
              "name": "n",
              "type": "int",
              "description": "The length of the character n-gram, default is 2."
            }
          ],
          "return_type": "dict"
        },
        {
          "name": "analyze_ayah_character_ngrams",
          "description": "Analyzes character n-gram frequency at the Ayah level by processing each ayah's text and counting n-grams. Logs the top 3 n-grams along with the frequency count and returns the results as a dictionary.",
          "parameters": [
            {
              "name": "quran_data",
              "type": "list",
              "description": "List of dictionaries containing Quran data with text information for each ayah."
            },
            {
              "name": "n",
              "type": "int",
              "description": "The length of the character n-gram, default is 2."
            }
          ],
          "return_type": "dict"
        }
      ],
      "dependencies": []
    },
    {
      "path": "tests/test_ngram_analyzer.py",
      "language": "python",
      "description": "Unit tests for the n-gram analyzer module, verifying the correctness of character n-gram analysis functions at the Quran, Surah, and Ayah levels.",
      "classes": [
        {
          "name": "TestCharacterNGrams",
          "description": "Unit tests for n-gram analysis functions in the ngram_analyzer module to ensure accurate frequency counts of character n-grams.",
          "parents": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "test_analyze_character_ngrams_n2",
              "description": "Tests the analyze_character_ngrams function with n=2 to verify correct bigram frequency counting on sample data.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestCharacterNGrams",
                  "description": "Instance of TestCharacterNGrams."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_character_ngrams_n3",
              "description": "Tests the analyze_character_ngrams function with n=3 to verify correct trigram frequency counting on sample input.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestCharacterNGrams",
                  "description": "Instance of TestCharacterNGrams."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_surah_character_ngrams",
              "description": "Tests the analyze_surah_character_ngrams function to ensure it correctly aggregates and counts character n-grams at the Surah level from multiple entries.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestCharacterNGrams",
                  "description": "Instance of TestCharacterNGrams."
                }
              ],
              "return_type": "None"
            },
            {
              "name": "test_analyze_ayah_character_ngrams",
              "description": "Tests the analyze_ayah_character_ngrams function to verify correct grouping and frequency counting of character n-grams at the Ayah level.",
              "parameters": [
                {
                  "name": "self",
                  "type": "TestCharacterNGrams",
                  "description": "Instance of TestCharacterNGrams."
                }
              ],
              "return_type": "None"
            }
          ]
        }
      ],
      "functions": [],
      "dependencies": [
        "src/ngram_analyzer.py"
      ]
    },
    {
      "path": "src/collocation_analyzer.py",
      "language": "python",
      "description": "Module for analyzing word collocations in Quran text. Contains a function `analyze_word_collocation` to find and count word pairs within a specified window size in Quranic verses. It preprocesses text, tokenizes it, and uses a sliding window to identify and count collocations, logging the analysis details.",
      "classes": [],
      "functions": [
        {
          "name": "analyze_word_collocation",
          "description": "Analyze word collocations in the given Quran data using a sliding window.\n    \n    For each ayah in quran_data, the function preprocesses the verse text \n    (using the existing TextPreprocessor if the processed text is not already present)\n    and tokenizes the text into words. For each word, it considers a window of adjacent \n    words (window_size to the left and window_size to the right, excluding the target word)\n    and counts each collocation pair. The collocation pairs are stored in alphabetical order \n    to ensure consistency.",
          "parameters": [
            {
              "name": "quran_data",
              "type": "list",
              "description": "A list of dictionaries representing ayahs. Each dictionary should contain at least a 'verse_text' key, and may contain a 'processed_text' key."
            },
            {
              "name": "window_size",
              "type": "int",
              "description": "The number of words to consider to the left and right of a target word. Default is 3."
            }
          ],
          "return_type": "Counter"
        }
      ],
      "dependencies": [
        "logging",
        "collections",
        "src.text_preprocessor"
      ]
    }
  ]
}